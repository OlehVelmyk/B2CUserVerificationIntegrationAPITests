// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Checks.
    /// </summary>
    public static partial class ChecksExtensions
    {
            /// <summary>
            /// Get all checks run on a profile
            /// </summary>
            /// <remarks>
            /// Returns a list of checks associated with the profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CheckResource>> ListAsync(this IChecks operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a check
            /// </summary>
            /// <remarks>
            /// Instruct a check on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='mode'>
            /// Whether the check should run async (respond immediately) or sync (wait for
            /// check completion). If unspecified, async for all checks except
            /// IDENTITY_CHECK. Possible values include: 'sync', 'async'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckResource> RunAsync(this IChecks operations, string profileId, CheckRequest body = default(CheckRequest), string mode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunWithHttpMessagesAsync(profileId, body, mode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get results of a specific check
            /// </summary>
            /// <remarks>
            /// Returns the current status and result of an instructed check
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='checkId'>
            /// The identifier for the specific check instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckResource> GetAsync(this IChecks operations, string profileId, string checkId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(profileId, checkId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the tasks associated with a check
            /// </summary>
            /// <remarks>
            /// Checks are immutable and their results cannot be edited. This endpoint will
            /// update the `task_ids` on a check, all other fields are ignored
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='checkId'>
            /// The identifier for the specific check instance
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckResource> UpdateAssociatedTasksAsync(this IChecks operations, string profileId, string checkId, CheckResource body = default(CheckResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAssociatedTasksWithHttpMessagesAsync(profileId, checkId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Manually approve a check
            /// </summary>
            /// <remarks>
            /// Generates a new check (checks are immutable and therefore not edited) from
            /// the specified check and sets the result to manually approved
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='checkId'>
            /// The identifier for the specific check instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveAsync(this IChecks operations, string profileId, string checkId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveWithHttpMessagesAsync(profileId, checkId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Manually reject a check
            /// </summary>
            /// <remarks>
            /// Generates a new check (checks are immutable and therefore not edited) from
            /// the specified check and sets the result to manually rejected
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='checkId'>
            /// The identifier for the specific check instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RejectAsync(this IChecks operations, string profileId, string checkId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RejectWithHttpMessagesAsync(profileId, checkId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
