// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The resulting matches of an EKYC check
    /// </summary>
    public partial class CheckResourceIdentityCheckOutputDataElectronicIdCheck
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CheckResourceIdentityCheckOutputDataElectronicIdCheck class.
        /// </summary>
        public CheckResourceIdentityCheckOutputDataElectronicIdCheck()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CheckResourceIdentityCheckOutputDataElectronicIdCheck class.
        /// </summary>
        /// <param name="matches">List of matches for the EKYC check</param>
        /// <param name="rules">List of rules that were used to compute the
        /// result</param>
        /// <param name="creditFiles">List of credit files that were matched
        /// for this profile or a no hit record</param>
        /// <param name="providerReferenceNumber">The provider reference for
        /// this EKYC request</param>
        /// <param name="providerUrl">A link to an external provider page,
        /// containing metadata for the associated check</param>
        /// <param name="providerResult">Indicates if the check result is
        /// calculated using the result returned by the provider</param>
        public CheckResourceIdentityCheckOutputDataElectronicIdCheck(IList<EKYCMatch> matches, IList<EKYCRuleResult> rules = default(IList<EKYCRuleResult>), IList<EKYCCreditFileMatch> creditFiles = default(IList<EKYCCreditFileMatch>), string providerReferenceNumber = default(string), string providerUrl = default(string), bool? providerResult = default(bool?))
        {
            Matches = matches;
            Rules = rules;
            CreditFiles = creditFiles;
            ProviderReferenceNumber = providerReferenceNumber;
            ProviderUrl = providerUrl;
            ProviderResult = providerResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of matches for the EKYC check
        /// </summary>
        [JsonProperty(PropertyName = "matches")]
        public IList<EKYCMatch> Matches { get; set; }

        /// <summary>
        /// Gets or sets list of rules that were used to compute the result
        /// </summary>
        [JsonProperty(PropertyName = "rules")]
        public IList<EKYCRuleResult> Rules { get; set; }

        /// <summary>
        /// Gets or sets list of credit files that were matched for this
        /// profile or a no hit record
        /// </summary>
        [JsonProperty(PropertyName = "credit_files")]
        public IList<EKYCCreditFileMatch> CreditFiles { get; set; }

        /// <summary>
        /// Gets or sets the provider reference for this EKYC request
        /// </summary>
        [JsonProperty(PropertyName = "provider_reference_number")]
        public string ProviderReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets a link to an external provider page, containing
        /// metadata for the associated check
        /// </summary>
        [JsonProperty(PropertyName = "provider_url")]
        public string ProviderUrl { get; set; }

        /// <summary>
        /// Gets or sets indicates if the check result is calculated using the
        /// result returned by the provider
        /// </summary>
        [JsonProperty(PropertyName = "provider_result")]
        public bool? ProviderResult { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Matches == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Matches");
            }
            if (Matches != null)
            {
                foreach (var element in Matches)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Rules != null)
            {
                foreach (var element1 in Rules)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
