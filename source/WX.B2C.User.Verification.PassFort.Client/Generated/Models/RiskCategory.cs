// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// RiskCategory
    /// </summary>
    /// <remarks>
    /// Risk category configuration
    /// </remarks>
    public partial class RiskCategory
    {
        /// <summary>
        /// Initializes a new instance of the RiskCategory class.
        /// </summary>
        public RiskCategory()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RiskCategory class.
        /// </summary>
        /// <param name="type">Category type</param>
        /// <param name="customFieldName">Custom field name</param>
        /// <param name="overrideName">Overridden risk factor name</param>
        public RiskCategory(string type, string customFieldName = default(string), string overrideName = default(string))
        {
            Type = type;
            CustomFieldName = customFieldName;
            OverrideName = overrideName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets category type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets custom field name
        /// </summary>
        [JsonProperty(PropertyName = "custom_field_name")]
        public string CustomFieldName { get; set; }

        /// <summary>
        /// Gets or sets overridden risk factor name
        /// </summary>
        [JsonProperty(PropertyName = "override_name")]
        public string OverrideName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
