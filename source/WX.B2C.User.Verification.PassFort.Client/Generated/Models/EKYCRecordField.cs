// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// EKYCRecordField
    /// </summary>
    /// <remarks>
    /// Describes any field retrieved from a provider for record keeping
    /// </remarks>
    public partial class EKYCRecordField
    {
        /// <summary>
        /// Initializes a new instance of the EKYCRecordField class.
        /// </summary>
        public EKYCRecordField()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EKYCRecordField class.
        /// </summary>
        /// <param name="name">The name of the field that was retrieved from
        /// the provider</param>
        /// <param name="value">The value of the field, as retrieved from the
        /// provider</param>
        public EKYCRecordField(string name, string value)
        {
            Name = name;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the field that was retrieved from the
        /// provider
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the value of the field, as retrieved from the provider
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
