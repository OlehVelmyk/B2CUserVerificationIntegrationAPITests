// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for FieldCheckResult.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(FieldCheckResultConverter))]
    public struct FieldCheckResult : System.IEquatable<FieldCheckResult>
    {
        private FieldCheckResult(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly FieldCheckResult CHECKUNCERTAIN = "CHECK_UNCERTAIN";

        public static readonly FieldCheckResult CHECKINVALID = "CHECK_INVALID";

        public static readonly FieldCheckResult CHECKVALID = "CHECK_VALID";


        /// <summary>
        /// Underlying value of enum FieldCheckResult
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for FieldCheckResult
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type FieldCheckResult
        /// </summary>
        public bool Equals(FieldCheckResult e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to FieldCheckResult
        /// </summary>
        public static implicit operator FieldCheckResult(string value)
        {
            return new FieldCheckResult(value);
        }

        /// <summary>
        /// Implicit operator to convert FieldCheckResult to string
        /// </summary>
        public static implicit operator string(FieldCheckResult e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum FieldCheckResult
        /// </summary>
        public static bool operator == (FieldCheckResult e1, FieldCheckResult e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum FieldCheckResult
        /// </summary>
        public static bool operator != (FieldCheckResult e1, FieldCheckResult e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for FieldCheckResult
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is FieldCheckResult && Equals((FieldCheckResult)obj);
        }

        /// <summary>
        /// Returns for hashCode FieldCheckResult
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
