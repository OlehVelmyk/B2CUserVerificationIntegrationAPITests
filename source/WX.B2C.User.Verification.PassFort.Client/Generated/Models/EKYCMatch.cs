// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// EKYCMatch
    /// </summary>
    /// <remarks>
    /// Describes a match against a database for an EKYC check
    /// </remarks>
    public partial class EKYCMatch
    {
        /// <summary>
        /// Initializes a new instance of the EKYCMatch class.
        /// </summary>
        public EKYCMatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EKYCMatch class.
        /// </summary>
        /// <param name="databaseName">Name of the database containing a
        /// match</param>
        /// <param name="databaseType">Possible values include: 'ALERT',
        /// 'CIVIL', 'CREDIT', 'MORTALITY', 'IGNORED'</param>
        /// <param name="matchedFields">List of matched fields for this
        /// database</param>
        /// <param name="extra">List of other fields that were retrieved from
        /// the provider</param>
        /// <param name="count">How many times this set of fields was matched
        /// in this database</param>
        public EKYCMatch(string databaseName, string databaseType, IList<string> matchedFields, string dateFirstSeen = default(string), string dateOfLastActivity = default(string), IList<EKYCRecordField> extra = default(IList<EKYCRecordField>), int? count = default(int?))
        {
            DatabaseName = databaseName;
            DatabaseType = databaseType;
            MatchedFields = matchedFields;
            DateFirstSeen = dateFirstSeen;
            DateOfLastActivity = dateOfLastActivity;
            Extra = extra;
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the database containing a match
        /// </summary>
        [JsonProperty(PropertyName = "database_name")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ALERT', 'CIVIL', 'CREDIT',
        /// 'MORTALITY', 'IGNORED'
        /// </summary>
        [JsonProperty(PropertyName = "database_type")]
        public string DatabaseType { get; set; }

        /// <summary>
        /// Gets or sets list of matched fields for this database
        /// </summary>
        [JsonProperty(PropertyName = "matched_fields")]
        public IList<string> MatchedFields { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date_first_seen")]
        public string DateFirstSeen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date_of_last_activity")]
        public string DateOfLastActivity { get; set; }

        /// <summary>
        /// Gets or sets list of other fields that were retrieved from the
        /// provider
        /// </summary>
        [JsonProperty(PropertyName = "extra")]
        public IList<EKYCRecordField> Extra { get; set; }

        /// <summary>
        /// Gets or sets how many times this set of fields was matched in this
        /// database
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (DatabaseType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseType");
            }
            if (MatchedFields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MatchedFields");
            }
            if (Extra != null)
            {
                foreach (var element in Extra)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
