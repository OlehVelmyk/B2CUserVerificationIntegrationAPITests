// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DocumentType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DocumentTypeConverter))]
    public struct DocumentType : System.IEquatable<DocumentType>
    {
        private DocumentType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly DocumentType PASSPORT = "PASSPORT";

        public static readonly DocumentType PASSPORTCARD = "PASSPORT_CARD";

        public static readonly DocumentType DRIVINGLICENCE = "DRIVING_LICENCE";

        public static readonly DocumentType STATEID = "STATE_ID";

        public static readonly DocumentType VOTERID = "VOTER_ID";

        public static readonly DocumentType BIOMETRICSTATEID = "BIOMETRIC_STATE_ID";

        public static readonly DocumentType BIRTHCERTIFICATE = "BIRTH_CERTIFICATE";

        public static readonly DocumentType BANKSTATEMENT = "BANK_STATEMENT";

        public static readonly DocumentType FACEIMAGE = "FACE_IMAGE";

        public static readonly DocumentType UNKNOWN = "UNKNOWN";

        public static readonly DocumentType COMPANYACCOUNTS = "COMPANY_ACCOUNTS";

        public static readonly DocumentType COMPANYCHANGEOFADDRESS = "COMPANY_CHANGE_OF_ADDRESS";

        public static readonly DocumentType ANNUALRETURN = "ANNUAL_RETURN";

        public static readonly DocumentType CONFIRMATIONSTATEMENT = "CONFIRMATION_STATEMENT";

        public static readonly DocumentType STATEMENTOFCAPITAL = "STATEMENT_OF_CAPITAL";

        public static readonly DocumentType CHANGEOFNAME = "CHANGE_OF_NAME";

        public static readonly DocumentType INCORPORATION = "INCORPORATION";

        public static readonly DocumentType LIQUIDATION = "LIQUIDATION";

        public static readonly DocumentType MISCELLANEOUS = "MISCELLANEOUS";

        public static readonly DocumentType MORTGAGE = "MORTGAGE";

        public static readonly DocumentType CHANGEOFOFFICERS = "CHANGE_OF_OFFICERS";

        public static readonly DocumentType RESOLUTION = "RESOLUTION";

        public static readonly DocumentType CREDITREPORT = "CREDIT_REPORT";

        public static readonly DocumentType CREDITCHECK = "CREDIT_CHECK";

        public static readonly DocumentType REGISTERREPORT = "REGISTER_REPORT";

        public static readonly DocumentType REGISTERCHECK = "REGISTER_CHECK";

        public static readonly DocumentType DATASUMMARY = "DATA_SUMMARY";

        public static readonly DocumentType CHANGEOFPSC = "CHANGE_OF_PSC";

        public static readonly DocumentType ADVERSEMEDIA = "ADVERSE_MEDIA";

        public static readonly DocumentType TAX = "TAX";

        public static readonly DocumentType UTILITYBILL = "UTILITY_BILL";

        public static readonly DocumentType HEALTHCAREID = "HEALTHCARE_ID";

        public static readonly DocumentType TAXID = "TAX_ID";

        public static readonly DocumentType RESIDENCEID = "RESIDENCE_ID";

        public static readonly DocumentType RESIDENCEOTHER = "RESIDENCE_OTHER";

        public static readonly DocumentType VISA = "VISA";


        /// <summary>
        /// Underlying value of enum DocumentType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DocumentType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DocumentType
        /// </summary>
        public bool Equals(DocumentType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DocumentType
        /// </summary>
        public static implicit operator DocumentType(string value)
        {
            return new DocumentType(value);
        }

        /// <summary>
        /// Implicit operator to convert DocumentType to string
        /// </summary>
        public static implicit operator string(DocumentType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DocumentType
        /// </summary>
        public static bool operator == (DocumentType e1, DocumentType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DocumentType
        /// </summary>
        public static bool operator != (DocumentType e1, DocumentType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DocumentType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DocumentType && Equals((DocumentType)obj);
        }

        /// <summary>
        /// Returns for hashCode DocumentType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
