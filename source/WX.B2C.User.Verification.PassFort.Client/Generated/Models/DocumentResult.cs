// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// DocumentResult
    /// </summary>
    /// <remarks>
    /// Results of a check on a document
    /// </remarks>
    public partial class DocumentResult
    {
        /// <summary>
        /// Initializes a new instance of the DocumentResult class.
        /// </summary>
        public DocumentResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentResult class.
        /// </summary>
        /// <param name="providerName">Name of the verification
        /// provider</param>
        /// <param name="providerInformation">Additional information returned
        /// by a provider</param>
        /// <param name="imageChecksPassed">Whether all of the image checks
        /// passed. These cover aspects such as the resolution and clarity of
        /// the image(s)</param>
        /// <param name="imageChecks">Detailed result for each of the image
        /// checks performed</param>
        /// <param name="documentTypePassed">If the document is of the correct
        /// type</param>
        /// <param name="forgeryChecksPassed">Whether all of the forgery checks
        /// passed. These vary by provider, but may include details such as
        /// whether the correct fonts were used on the document</param>
        /// <param name="forgeryChecks">Detailed result for each of the forgery
        /// checks performed</param>
        /// <param name="fieldChecks">These checks ascertain whether the
        /// details extracted from the document are valid, and match those
        /// submitted on the profile</param>
        /// <param name="allPassed">Whether all of the image, forgery and field
        /// checks passed</param>
        /// <param name="errorReason">Message indicating why the document could
        /// not be checked</param>
        public DocumentResult(string providerName = default(string), string reviewDate = default(string), IList<ProviderField> providerInformation = default(IList<ProviderField>), bool? imageChecksPassed = default(bool?), IList<DocumentCheck> imageChecks = default(IList<DocumentCheck>), bool? documentTypePassed = default(bool?), bool? forgeryChecksPassed = default(bool?), IList<DocumentCheck> forgeryChecks = default(IList<DocumentCheck>), IList<DocumentResultFieldChecksItem> fieldChecks = default(IList<DocumentResultFieldChecksItem>), bool? allPassed = default(bool?), string errorReason = default(string))
        {
            ProviderName = providerName;
            ReviewDate = reviewDate;
            ProviderInformation = providerInformation;
            ImageChecksPassed = imageChecksPassed;
            ImageChecks = imageChecks;
            DocumentTypePassed = documentTypePassed;
            ForgeryChecksPassed = forgeryChecksPassed;
            ForgeryChecks = forgeryChecks;
            FieldChecks = fieldChecks;
            AllPassed = allPassed;
            ErrorReason = errorReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the verification provider
        /// </summary>
        [JsonProperty(PropertyName = "provider_name")]
        public string ProviderName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "review_date")]
        public string ReviewDate { get; set; }

        /// <summary>
        /// Gets or sets additional information returned by a provider
        /// </summary>
        [JsonProperty(PropertyName = "provider_information")]
        public IList<ProviderField> ProviderInformation { get; set; }

        /// <summary>
        /// Gets or sets whether all of the image checks passed. These cover
        /// aspects such as the resolution and clarity of the image(s)
        /// </summary>
        [JsonProperty(PropertyName = "image_Checks_passed")]
        public bool? ImageChecksPassed { get; set; }

        /// <summary>
        /// Gets or sets detailed result for each of the image checks performed
        /// </summary>
        [JsonProperty(PropertyName = "image_checks")]
        public IList<DocumentCheck> ImageChecks { get; set; }

        /// <summary>
        /// Gets or sets if the document is of the correct type
        /// </summary>
        [JsonProperty(PropertyName = "document_type_passed")]
        public bool? DocumentTypePassed { get; set; }

        /// <summary>
        /// Gets or sets whether all of the forgery checks passed. These vary
        /// by provider, but may include details such as whether the correct
        /// fonts were used on the document
        /// </summary>
        [JsonProperty(PropertyName = "forgery_Checks_passed")]
        public bool? ForgeryChecksPassed { get; set; }

        /// <summary>
        /// Gets or sets detailed result for each of the forgery checks
        /// performed
        /// </summary>
        [JsonProperty(PropertyName = "forgery_checks")]
        public IList<DocumentCheck> ForgeryChecks { get; set; }

        /// <summary>
        /// Gets or sets these checks ascertain whether the details extracted
        /// from the document are valid, and match those submitted on the
        /// profile
        /// </summary>
        [JsonProperty(PropertyName = "field_checks")]
        public IList<DocumentResultFieldChecksItem> FieldChecks { get; set; }

        /// <summary>
        /// Gets or sets whether all of the image, forgery and field checks
        /// passed
        /// </summary>
        [JsonProperty(PropertyName = "all_passed")]
        public bool? AllPassed { get; set; }

        /// <summary>
        /// Gets or sets message indicating why the document could not be
        /// checked
        /// </summary>
        [JsonProperty(PropertyName = "error_reason")]
        public string ErrorReason { get; set; }

    }
}
