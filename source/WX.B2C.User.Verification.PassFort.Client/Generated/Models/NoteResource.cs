// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NoteResource
    /// </summary>
    /// <remarks>
    /// Base note resource definition
    /// </remarks>
    public partial class NoteResource
    {
        /// <summary>
        /// Initializes a new instance of the NoteResource class.
        /// </summary>
        public NoteResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NoteResource class.
        /// </summary>
        /// <param name="text">Note text</param>
        /// <param name="attachments">Associated files (if present)</param>
        /// <param name="authorName">If `author_name_customised` is `false`
        /// this will be equal to `author.name` or the name of the API key. If
        /// `author_name_customised` is `true` this field was manually
        /// specified.</param>
        /// <param name="authorNameCustomised">Is `true` if the author_name was
        /// set to a custom value.</param>
        /// <param name="author">Note author</param>
        public NoteResource(string id, string createdOn, string text = default(string), IList<MinimalFileResource> attachments = default(IList<MinimalFileResource>), string authorName = default(string), bool? authorNameCustomised = default(bool?), NoteResourceAuthor author = default(NoteResourceAuthor))
        {
            Id = id;
            Text = text;
            Attachments = attachments;
            CreatedOn = createdOn;
            AuthorName = authorName;
            AuthorNameCustomised = authorNameCustomised;
            Author = author;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets note text
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets associated files (if present)
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<MinimalFileResource> Attachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created_on")]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Gets or sets if `author_name_customised` is `false` this will be
        /// equal to `author.name` or the name of the API key. If
        /// `author_name_customised` is `true` this field was manually
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "author_name")]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or sets is `true` if the author_name was set to a custom
        /// value.
        /// </summary>
        [JsonProperty(PropertyName = "author_name_customised")]
        public bool? AuthorNameCustomised { get; set; }

        /// <summary>
        /// Gets or sets note author
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public NoteResourceAuthor Author { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (CreatedOn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedOn");
            }
            if (Attachments != null)
            {
                foreach (var element in Attachments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Author != null)
            {
                Author.Validate();
            }
        }
    }
}
