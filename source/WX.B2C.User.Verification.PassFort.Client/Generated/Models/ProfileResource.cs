// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ProfileResource
    /// </summary>
    /// <remarks>
    /// A customer profile
    /// </remarks>
    public partial class ProfileResource
    {
        /// <summary>
        /// Initializes a new instance of the ProfileResource class.
        /// </summary>
        public ProfileResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProfileResource class.
        /// </summary>
        /// <param name="role">Possible values include: 'INDIVIDUAL_CUSTOMER',
        /// 'INDIVIDUAL_ASSOCIATED', 'COMPANY_CUSTOMER',
        /// 'COMPANY_ASSOCIATED'</param>
        /// <param name="checks">A list of checks performed on this
        /// profile</param>
        /// <param name="collectionSteps">CollectionSteps describe data which
        /// is required, but missing on the profile.
        ///
        /// They are typically generated when a check is instructed (but not
        /// enough data is avaialble to perform it), or when a compliance
        /// officer explictly requests further information</param>
        /// <param name="displayName">The name (given and family name of an
        /// individual; legal name of a company) of the entity</param>
        /// <param name="applications">Product applications on profile</param>
        /// <param name="taskTypes">Task types active on profile</param>
        /// <param name="tasks">A list of tasks which need to (or have been)
        /// performed on a profile. This set is typically configured as part of
        /// your smart policy. You will need to complete all tasks to approve a
        /// profile</param>
        /// <param name="events">Events on a profile</param>
        /// <param name="category">Possible values include: 'CUSTOMER',
        /// 'PREVIOUS_CUSTOMER', 'APPLICANT', 'INACTIVE_APPLICANT'</param>
        /// <param name="documentImages">List of document images attached to
        /// the profile</param>
        /// <param name="tags">A list of tags attached to the profile</param>
        /// <param name="unresolvedEventTypes">The types of remaining
        /// unresolved events</param>
        /// <param name="hasAssociates">Whether the profile has any associated
        /// profiles</param>
        /// <param name="hasCollectionSteps">Whether the profile has any
        /// outstanding CollectionSteps</param>
        /// <param name="linkedTo">ID of the linked profile</param>
        public ProfileResource(string id = default(string), string creationDate = default(string), string role = default(string), IndividualData collectedData = default(IndividualData), IndividualData verifiedData = default(IndividualData), IList<CheckResource> checks = default(IList<CheckResource>), IList<CollectionStep> collectionSteps = default(IList<CollectionStep>), string displayName = default(string), IList<ProductApplication> applications = default(IList<ProductApplication>), IList<TaskType?> taskTypes = default(IList<TaskType?>), IList<TaskResource> tasks = default(IList<TaskResource>), IList<EventResource> events = default(IList<EventResource>), string category = default(string), IList<DocumentImageResourceMinimal> documentImages = default(IList<DocumentImageResourceMinimal>), IList<TagResource> tags = default(IList<TagResource>), IList<string> unresolvedEventTypes = default(IList<string>), TaskProgress taskProgress = default(TaskProgress), bool? hasAssociates = default(bool?), bool? hasCollectionSteps = default(bool?), IList<ProfileResourceLinkedToItem> linkedTo = default(IList<ProfileResourceLinkedToItem>))
        {
            Id = id;
            CreationDate = creationDate;
            Role = role;
            CollectedData = collectedData;
            VerifiedData = verifiedData;
            Checks = checks;
            CollectionSteps = collectionSteps;
            DisplayName = displayName;
            Applications = applications;
            TaskTypes = taskTypes;
            Tasks = tasks;
            Events = events;
            Category = category;
            DocumentImages = documentImages;
            Tags = tags;
            UnresolvedEventTypes = unresolvedEventTypes;
            TaskProgress = taskProgress;
            HasAssociates = hasAssociates;
            HasCollectionSteps = hasCollectionSteps;
            LinkedTo = linkedTo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "creation_date")]
        public string CreationDate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'INDIVIDUAL_CUSTOMER',
        /// 'INDIVIDUAL_ASSOCIATED', 'COMPANY_CUSTOMER', 'COMPANY_ASSOCIATED'
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "collected_data")]
        public IndividualData CollectedData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "verified_data")]
        public IndividualData VerifiedData { get; set; }

        /// <summary>
        /// Gets or sets a list of checks performed on this profile
        /// </summary>
        [JsonProperty(PropertyName = "checks")]
        public IList<CheckResource> Checks { get; set; }

        /// <summary>
        /// Gets or sets collectionSteps describe data which is required, but
        /// missing on the profile.
        ///
        /// They are typically generated when a check is instructed (but not
        /// enough data is avaialble to perform it), or when a compliance
        /// officer explictly requests further information
        /// </summary>
        [JsonProperty(PropertyName = "collection_steps")]
        public IList<CollectionStep> CollectionSteps { get; set; }

        /// <summary>
        /// Gets or sets the name (given and family name of an individual;
        /// legal name of a company) of the entity
        /// </summary>
        [JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets product applications on profile
        /// </summary>
        [JsonProperty(PropertyName = "applications")]
        public IList<ProductApplication> Applications { get; set; }

        /// <summary>
        /// Gets or sets task types active on profile
        /// </summary>
        [JsonProperty(PropertyName = "task_types")]
        public IList<TaskType?> TaskTypes { get; set; }

        /// <summary>
        /// Gets or sets a list of tasks which need to (or have been) performed
        /// on a profile. This set is typically configured as part of your
        /// smart policy. You will need to complete all tasks to approve a
        /// profile
        /// </summary>
        [JsonProperty(PropertyName = "tasks")]
        public IList<TaskResource> Tasks { get; set; }

        /// <summary>
        /// Gets or sets events on a profile
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<EventResource> Events { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'CUSTOMER',
        /// 'PREVIOUS_CUSTOMER', 'APPLICANT', 'INACTIVE_APPLICANT'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets list of document images attached to the profile
        /// </summary>
        [JsonProperty(PropertyName = "document_images")]
        public IList<DocumentImageResourceMinimal> DocumentImages { get; set; }

        /// <summary>
        /// Gets or sets a list of tags attached to the profile
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<TagResource> Tags { get; set; }

        /// <summary>
        /// Gets or sets the types of remaining unresolved events
        /// </summary>
        [JsonProperty(PropertyName = "unresolved_event_types")]
        public IList<string> UnresolvedEventTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "task_progress")]
        public TaskProgress TaskProgress { get; set; }

        /// <summary>
        /// Gets or sets whether the profile has any associated profiles
        /// </summary>
        [JsonProperty(PropertyName = "has_associates")]
        public bool? HasAssociates { get; set; }

        /// <summary>
        /// Gets or sets whether the profile has any outstanding
        /// CollectionSteps
        /// </summary>
        [JsonProperty(PropertyName = "has_collection_steps")]
        public bool? HasCollectionSteps { get; set; }

        /// <summary>
        /// Gets ID of the linked profile
        /// </summary>
        [JsonProperty(PropertyName = "linked_to")]
        public IList<ProfileResourceLinkedToItem> LinkedTo { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CollectedData != null)
            {
                CollectedData.Validate();
            }
            if (VerifiedData != null)
            {
                VerifiedData.Validate();
            }
            if (Checks != null)
            {
                foreach (var element in Checks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Tasks != null)
            {
                foreach (var element1 in Tasks)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
