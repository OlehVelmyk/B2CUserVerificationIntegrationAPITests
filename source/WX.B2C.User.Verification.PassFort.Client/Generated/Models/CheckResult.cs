// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for CheckResult.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(CheckResultConverter))]
    public struct CheckResult : System.IEquatable<CheckResult>
    {
        private CheckResult(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly CheckResult Pass = "Pass";

        public static readonly CheckResult Refer = "Refer";

        public static readonly CheckResult PEP = "PEP";

        public static readonly CheckResult Sanction = "Sanction";

        public static readonly CheckResult Media = "Media";

        public static readonly CheckResult Error = "Error";

        public static readonly CheckResult Partial = "Partial";

        public static readonly CheckResult Fail = "Fail";

        public static readonly CheckResult TwoPlusSignTwo = "2+2";

        public static readonly CheckResult OnePlusSignOne = "1+1";


        /// <summary>
        /// Underlying value of enum CheckResult
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for CheckResult
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type CheckResult
        /// </summary>
        public bool Equals(CheckResult e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to CheckResult
        /// </summary>
        public static implicit operator CheckResult(string value)
        {
            return new CheckResult(value);
        }

        /// <summary>
        /// Implicit operator to convert CheckResult to string
        /// </summary>
        public static implicit operator string(CheckResult e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum CheckResult
        /// </summary>
        public static bool operator == (CheckResult e1, CheckResult e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum CheckResult
        /// </summary>
        public static bool operator != (CheckResult e1, CheckResult e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for CheckResult
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is CheckResult && Equals((CheckResult)obj);
        }

        /// <summary>
        /// Returns for hashCode CheckResult
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
