// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// TaskResource
    /// </summary>
    /// <remarks>
    /// A task variant that can be used in a task set
    /// </remarks>
    public partial class TaskResource
    {
        /// <summary>
        /// Initializes a new instance of the TaskResource class.
        /// </summary>
        public TaskResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskResource class.
        /// </summary>
        /// <param name="type">Possible values include:
        /// 'INDIVIDUAL_VERIFY_IDENTITY', 'INDIVIDUAL_VERIFY_ADDRESS',
        /// 'INDIVIDUAL_VERIFY_SOURCE_OF_FUNDS',
        /// 'INDIVIDUAL_ASSESS_MEDIA_AND_POLITICAL_AND_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_POLITICAL_AND_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_POLITICAL_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_VERIFY_BANK_ACCOUNT',
        /// 'INDIVIDUAL_VERIFY_IMMIGRATION_STATUS', 'INDIVIDUAL_MANUAL_TASK',
        /// 'INDIVIDUAL_ASSESS_DEVICE_REPUTATION',
        /// 'INDIVIDUAL_FRAUD_SCREENING', 'INDIVIDUAL_VERIFY_TAX_STATUS',
        /// 'COMPANY_VERIFY_IDENTITY', 'COMPANY_VERIFY_ADDRESS',
        /// 'COMPANY_VERIFY_CHARITY', 'COMPANY_IDENTIFY_AUTHORIZED_PERSONS',
        /// 'COMPANY_IDENTIFY_OFFICERS', 'COMPANY_IDENTIFY_TRUSTEES',
        /// 'COMPANY_IDENTIFY_BENEFICIAL_OWNERS', 'COMPANY_REVIEW_FILINGS',
        /// 'COMPANY_ASSESS_SANCTIONS_EXPOSURE',
        /// 'COMPANY_ASSESS_MEDIA_EXPOSURE',
        /// 'COMPANY_ASSESS_MEDIA_AND_SANCTIONS_EXPOSURE',
        /// 'COMPANY_MANUAL_TASK', 'COMPANY_VERIFY_BANK_ACCOUNT',
        /// 'COMPANY_VERIFY_TAX_STATUS', 'COMPANY_ASSESS_FINANCIALS',
        /// 'COMPANY_FRAUD_SCREENING',
        /// 'COMPANY_MERCHANT_FRAUD_SCREENING'</param>
        /// <param name="state">Possible values include: 'INCOMPLETE',
        /// 'COMPLETED_PASS', 'COMPLETED_FAIL'</param>
        /// <param name="isComplete">Whether a task is currently
        /// complete</param>
        /// <param name="isDeleted">Whether this task set has been
        /// deleted</param>
        /// <param name="isExpired">Whether a task is expired</param>
        /// <param name="expiryReason">The reason why this task expired.
        /// Possible values include: 'CHECK_EXPIRED', 'PROFILE_DEACTIVATED',
        /// 'NEW_TASK_VERSION', 'EXPIRY_PERIOD_ENDED'</param>
        /// <param name="checkIds">A list of the checks which have been
        /// associated with this task</param>
        /// <param name="isSkipped">Whether this task is skipped</param>
        /// <param name="needsCheckAutomation">Whether this task is currently
        /// waiting for automatic checks to run</param>
        public TaskResource(string id = default(string), TaskVariant variant = default(TaskVariant), TaskType? type = default(TaskType?), TaskState? state = default(TaskState?), bool? isComplete = default(bool?), bool? isDeleted = default(bool?), bool? isExpired = default(bool?), string expiredAt = default(string), string willExpireAt = default(string), string expiryReason = default(string), string creationDate = default(string), IList<string> checkIds = default(IList<string>), bool? isSkipped = default(bool?), bool? needsCheckAutomation = default(bool?))
        {
            Id = id;
            Variant = variant;
            Type = type;
            State = state;
            IsComplete = isComplete;
            IsDeleted = isDeleted;
            IsExpired = isExpired;
            ExpiredAt = expiredAt;
            WillExpireAt = willExpireAt;
            ExpiryReason = expiryReason;
            CreationDate = creationDate;
            CheckIds = checkIds;
            IsSkipped = isSkipped;
            NeedsCheckAutomation = needsCheckAutomation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variant")]
        public TaskVariant Variant { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'INDIVIDUAL_VERIFY_IDENTITY',
        /// 'INDIVIDUAL_VERIFY_ADDRESS', 'INDIVIDUAL_VERIFY_SOURCE_OF_FUNDS',
        /// 'INDIVIDUAL_ASSESS_MEDIA_AND_POLITICAL_AND_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_POLITICAL_AND_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_POLITICAL_EXPOSURE',
        /// 'INDIVIDUAL_ASSESS_SANCTIONS_EXPOSURE',
        /// 'INDIVIDUAL_VERIFY_BANK_ACCOUNT',
        /// 'INDIVIDUAL_VERIFY_IMMIGRATION_STATUS', 'INDIVIDUAL_MANUAL_TASK',
        /// 'INDIVIDUAL_ASSESS_DEVICE_REPUTATION',
        /// 'INDIVIDUAL_FRAUD_SCREENING', 'INDIVIDUAL_VERIFY_TAX_STATUS',
        /// 'COMPANY_VERIFY_IDENTITY', 'COMPANY_VERIFY_ADDRESS',
        /// 'COMPANY_VERIFY_CHARITY', 'COMPANY_IDENTIFY_AUTHORIZED_PERSONS',
        /// 'COMPANY_IDENTIFY_OFFICERS', 'COMPANY_IDENTIFY_TRUSTEES',
        /// 'COMPANY_IDENTIFY_BENEFICIAL_OWNERS', 'COMPANY_REVIEW_FILINGS',
        /// 'COMPANY_ASSESS_SANCTIONS_EXPOSURE',
        /// 'COMPANY_ASSESS_MEDIA_EXPOSURE',
        /// 'COMPANY_ASSESS_MEDIA_AND_SANCTIONS_EXPOSURE',
        /// 'COMPANY_MANUAL_TASK', 'COMPANY_VERIFY_BANK_ACCOUNT',
        /// 'COMPANY_VERIFY_TAX_STATUS', 'COMPANY_ASSESS_FINANCIALS',
        /// 'COMPANY_FRAUD_SCREENING', 'COMPANY_MERCHANT_FRAUD_SCREENING'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public TaskType? Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'INCOMPLETE',
        /// 'COMPLETED_PASS', 'COMPLETED_FAIL'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public TaskState? State { get; set; }

        /// <summary>
        /// Gets or sets whether a task is currently complete
        /// </summary>
        [JsonProperty(PropertyName = "is_complete")]
        public bool? IsComplete { get; set; }

        /// <summary>
        /// Gets or sets whether this task set has been deleted
        /// </summary>
        [JsonProperty(PropertyName = "is_deleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets whether a task is expired
        /// </summary>
        [JsonProperty(PropertyName = "is_expired")]
        public bool? IsExpired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expired_at")]
        public string ExpiredAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "will_expire_at")]
        public string WillExpireAt { get; set; }

        /// <summary>
        /// Gets or sets the reason why this task expired. Possible values
        /// include: 'CHECK_EXPIRED', 'PROFILE_DEACTIVATED',
        /// 'NEW_TASK_VERSION', 'EXPIRY_PERIOD_ENDED'
        /// </summary>
        [JsonProperty(PropertyName = "expiry_reason")]
        public string ExpiryReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "creation_date")]
        public string CreationDate { get; set; }

        /// <summary>
        /// Gets or sets a list of the checks which have been associated with
        /// this task
        /// </summary>
        [JsonProperty(PropertyName = "check_ids")]
        public IList<string> CheckIds { get; set; }

        /// <summary>
        /// Gets or sets whether this task is skipped
        /// </summary>
        [JsonProperty(PropertyName = "is_skipped")]
        public bool? IsSkipped { get; set; }

        /// <summary>
        /// Gets or sets whether this task is currently waiting for automatic
        /// checks to run
        /// </summary>
        [JsonProperty(PropertyName = "needs_check_automation")]
        public bool? NeedsCheckAutomation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Variant != null)
            {
                Variant.Validate();
            }
        }
    }
}
