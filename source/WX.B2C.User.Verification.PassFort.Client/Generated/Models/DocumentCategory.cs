// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DocumentCategory.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DocumentCategoryConverter))]
    public struct DocumentCategory : System.IEquatable<DocumentCategory>
    {
        private DocumentCategory(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly DocumentCategory PROOFOFIDENTITY = "PROOF_OF_IDENTITY";

        public static readonly DocumentCategory PROOFOFSOURCEOFWEALTH = "PROOF_OF_SOURCE_OF_WEALTH";

        public static readonly DocumentCategory PROOFOFSOURCEOFFUNDS = "PROOF_OF_SOURCE_OF_FUNDS";

        public static readonly DocumentCategory PROOFOFADDRESS = "PROOF_OF_ADDRESS";

        public static readonly DocumentCategory SUPPORTING = "SUPPORTING";

        public static readonly DocumentCategory COMPANYFILING = "COMPANY_FILING";

        public static readonly DocumentCategory DATASUMMARY = "DATA_SUMMARY";

        public static readonly DocumentCategory PROOFOFBANKACCOUNT = "PROOF_OF_BANK_ACCOUNT";

        public static readonly DocumentCategory PROOFOFTAXSTATUS = "PROOF_OF_TAX_STATUS";


        /// <summary>
        /// Underlying value of enum DocumentCategory
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DocumentCategory
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DocumentCategory
        /// </summary>
        public bool Equals(DocumentCategory e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DocumentCategory
        /// </summary>
        public static implicit operator DocumentCategory(string value)
        {
            return new DocumentCategory(value);
        }

        /// <summary>
        /// Implicit operator to convert DocumentCategory to string
        /// </summary>
        public static implicit operator string(DocumentCategory e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DocumentCategory
        /// </summary>
        public static bool operator == (DocumentCategory e1, DocumentCategory e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DocumentCategory
        /// </summary>
        public static bool operator != (DocumentCategory e1, DocumentCategory e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DocumentCategory
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DocumentCategory && Equals((DocumentCategory)obj);
        }

        /// <summary>
        /// Returns for hashCode DocumentCategory
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
