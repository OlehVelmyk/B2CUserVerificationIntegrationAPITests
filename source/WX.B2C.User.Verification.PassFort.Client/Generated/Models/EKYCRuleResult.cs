// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// EKYCRuleResult
    /// </summary>
    /// <remarks>
    /// Describes a rule and how it is used to determine the outcome of an EKYC
    /// check
    /// </remarks>
    public partial class EKYCRuleResult
    {
        /// <summary>
        /// Initializes a new instance of the EKYCRuleResult class.
        /// </summary>
        public EKYCRuleResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EKYCRuleResult class.
        /// </summary>
        /// <param name="active">True if this is the rule that was matched for
        /// the result of this check</param>
        /// <param name="databaseTypes">The types of databases that this rule
        /// applies to</param>
        /// <param name="requires">Describes what what requirements need to be
        /// met to satisfy this rule.</param>
        /// <param name="result">The check result corresponding to this rule.
        /// Possible values include: '2+2', '1+1', 'Fail'</param>
        /// <param name="name">Human readable description of the rule</param>
        /// <param name="distinctSources">True if distinct sources are required
        /// to satisfy this rule</param>
        /// <param name="satisfiedBy">Lists the database names and fields that
        /// were used to satisfy this rule</param>
        public EKYCRuleResult(bool active, IList<string> databaseTypes, IList<EKYCRuleResultRequiresItem> requires, string result, string name = default(string), bool? distinctSources = default(bool?), IList<EKYCRuleResultSatisfiedByItem> satisfiedBy = default(IList<EKYCRuleResultSatisfiedByItem>))
        {
            Name = name;
            Active = active;
            DistinctSources = distinctSources;
            DatabaseTypes = databaseTypes;
            Requires = requires;
            SatisfiedBy = satisfiedBy;
            Result = result;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets human readable description of the rule
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets true if this is the rule that was matched for the
        /// result of this check
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or sets true if distinct sources are required to satisfy this
        /// rule
        /// </summary>
        [JsonProperty(PropertyName = "distinct_sources")]
        public bool? DistinctSources { get; set; }

        /// <summary>
        /// Gets or sets the types of databases that this rule applies to
        /// </summary>
        [JsonProperty(PropertyName = "database_types")]
        public IList<string> DatabaseTypes { get; set; }

        /// <summary>
        /// Gets or sets describes what what requirements need to be met to
        /// satisfy this rule.
        /// </summary>
        [JsonProperty(PropertyName = "requires")]
        public IList<EKYCRuleResultRequiresItem> Requires { get; set; }

        /// <summary>
        /// Gets or sets lists the database names and fields that were used to
        /// satisfy this rule
        /// </summary>
        [JsonProperty(PropertyName = "satisfied_by")]
        public IList<EKYCRuleResultSatisfiedByItem> SatisfiedBy { get; set; }

        /// <summary>
        /// Gets or sets the check result corresponding to this rule. Possible
        /// values include: '2+2', '1+1', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public string Result { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DatabaseTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseTypes");
            }
            if (Requires == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Requires");
            }
            if (Result == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Result");
            }
        }
    }
}
