// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for TaskType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(TaskTypeConverter))]
    public struct TaskType : System.IEquatable<TaskType>
    {
        private TaskType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly TaskType INDIVIDUALVERIFYIDENTITY = "INDIVIDUAL_VERIFY_IDENTITY";

        public static readonly TaskType INDIVIDUALVERIFYADDRESS = "INDIVIDUAL_VERIFY_ADDRESS";

        public static readonly TaskType INDIVIDUALVERIFYSOURCEOFFUNDS = "INDIVIDUAL_VERIFY_SOURCE_OF_FUNDS";

        public static readonly TaskType INDIVIDUALASSESSMEDIAANDPOLITICALANDSANCTIONSEXPOSURE = "INDIVIDUAL_ASSESS_MEDIA_AND_POLITICAL_AND_SANCTIONS_EXPOSURE";

        public static readonly TaskType INDIVIDUALASSESSPOLITICALANDSANCTIONSEXPOSURE = "INDIVIDUAL_ASSESS_POLITICAL_AND_SANCTIONS_EXPOSURE";

        public static readonly TaskType INDIVIDUALASSESSPOLITICALEXPOSURE = "INDIVIDUAL_ASSESS_POLITICAL_EXPOSURE";

        public static readonly TaskType INDIVIDUALASSESSSANCTIONSEXPOSURE = "INDIVIDUAL_ASSESS_SANCTIONS_EXPOSURE";

        public static readonly TaskType INDIVIDUALVERIFYBANKACCOUNT = "INDIVIDUAL_VERIFY_BANK_ACCOUNT";

        public static readonly TaskType INDIVIDUALVERIFYIMMIGRATIONSTATUS = "INDIVIDUAL_VERIFY_IMMIGRATION_STATUS";

        public static readonly TaskType INDIVIDUALMANUALTASK = "INDIVIDUAL_MANUAL_TASK";

        public static readonly TaskType INDIVIDUALASSESSDEVICEREPUTATION = "INDIVIDUAL_ASSESS_DEVICE_REPUTATION";

        public static readonly TaskType INDIVIDUALFRAUDSCREENING = "INDIVIDUAL_FRAUD_SCREENING";

        public static readonly TaskType INDIVIDUALVERIFYTAXSTATUS = "INDIVIDUAL_VERIFY_TAX_STATUS";

        public static readonly TaskType COMPANYVERIFYIDENTITY = "COMPANY_VERIFY_IDENTITY";

        public static readonly TaskType COMPANYVERIFYADDRESS = "COMPANY_VERIFY_ADDRESS";

        public static readonly TaskType COMPANYVERIFYCHARITY = "COMPANY_VERIFY_CHARITY";

        public static readonly TaskType COMPANYIDENTIFYAUTHORIZEDPERSONS = "COMPANY_IDENTIFY_AUTHORIZED_PERSONS";

        public static readonly TaskType COMPANYIDENTIFYOFFICERS = "COMPANY_IDENTIFY_OFFICERS";

        public static readonly TaskType COMPANYIDENTIFYTRUSTEES = "COMPANY_IDENTIFY_TRUSTEES";

        public static readonly TaskType COMPANYIDENTIFYBENEFICIALOWNERS = "COMPANY_IDENTIFY_BENEFICIAL_OWNERS";

        public static readonly TaskType COMPANYREVIEWFILINGS = "COMPANY_REVIEW_FILINGS";

        public static readonly TaskType COMPANYASSESSSANCTIONSEXPOSURE = "COMPANY_ASSESS_SANCTIONS_EXPOSURE";

        public static readonly TaskType COMPANYASSESSMEDIAEXPOSURE = "COMPANY_ASSESS_MEDIA_EXPOSURE";

        public static readonly TaskType COMPANYASSESSMEDIAANDSANCTIONSEXPOSURE = "COMPANY_ASSESS_MEDIA_AND_SANCTIONS_EXPOSURE";

        public static readonly TaskType COMPANYMANUALTASK = "COMPANY_MANUAL_TASK";

        public static readonly TaskType COMPANYVERIFYBANKACCOUNT = "COMPANY_VERIFY_BANK_ACCOUNT";

        public static readonly TaskType COMPANYVERIFYTAXSTATUS = "COMPANY_VERIFY_TAX_STATUS";

        public static readonly TaskType COMPANYASSESSFINANCIALS = "COMPANY_ASSESS_FINANCIALS";

        public static readonly TaskType COMPANYFRAUDSCREENING = "COMPANY_FRAUD_SCREENING";

        public static readonly TaskType COMPANYMERCHANTFRAUDSCREENING = "COMPANY_MERCHANT_FRAUD_SCREENING";


        /// <summary>
        /// Underlying value of enum TaskType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for TaskType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type TaskType
        /// </summary>
        public bool Equals(TaskType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to TaskType
        /// </summary>
        public static implicit operator TaskType(string value)
        {
            return new TaskType(value);
        }

        /// <summary>
        /// Implicit operator to convert TaskType to string
        /// </summary>
        public static implicit operator string(TaskType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum TaskType
        /// </summary>
        public static bool operator == (TaskType e1, TaskType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum TaskType
        /// </summary>
        public static bool operator != (TaskType e1, TaskType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for TaskType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is TaskType && Equals((TaskType)obj);
        }

        /// <summary>
        /// Returns for hashCode TaskType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
