// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for CheckState.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(CheckStateConverter))]
    public struct CheckState : System.IEquatable<CheckState>
    {
        private CheckState(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly CheckState PENDING = "PENDING";

        public static readonly CheckState RUNNING = "RUNNING";

        public static readonly CheckState COMPLETE = "COMPLETE";


        /// <summary>
        /// Underlying value of enum CheckState
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for CheckState
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type CheckState
        /// </summary>
        public bool Equals(CheckState e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to CheckState
        /// </summary>
        public static implicit operator CheckState(string value)
        {
            return new CheckState(value);
        }

        /// <summary>
        /// Implicit operator to convert CheckState to string
        /// </summary>
        public static implicit operator string(CheckState e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum CheckState
        /// </summary>
        public static bool operator == (CheckState e1, CheckState e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum CheckState
        /// </summary>
        public static bool operator != (CheckState e1, CheckState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for CheckState
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is CheckState && Equals((CheckState)obj);
        }

        /// <summary>
        /// Returns for hashCode CheckState
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
