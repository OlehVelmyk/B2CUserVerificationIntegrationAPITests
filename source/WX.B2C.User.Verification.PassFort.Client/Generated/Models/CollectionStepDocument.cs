// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// CollectionStepDocument
    /// </summary>
    /// <remarks>
    /// Collect a document from the profile (which can be used for a document
    /// verification)
    /// </remarks>
    [Newtonsoft.Json.JsonObject("DOCUMENT")]
    public partial class CollectionStepDocument : CollectionStep
    {
        /// <summary>
        /// Initializes a new instance of the CollectionStepDocument class.
        /// </summary>
        public CollectionStepDocument()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CollectionStepDocument class.
        /// </summary>
        /// <param name="category">Possible values include:
        /// 'PROOF_OF_IDENTITY', 'PROOF_OF_SOURCE_OF_WEALTH',
        /// 'PROOF_OF_SOURCE_OF_FUNDS', 'PROOF_OF_ADDRESS', 'SUPPORTING',
        /// 'COMPANY_FILING', 'DATA_SUMMARY', 'PROOF_OF_BANK_ACCOUNT',
        /// 'PROOF_OF_TAX_STATUS'</param>
        /// <param name="allowedTypes">Specifies the types of document that are
        /// accepted. These will be presented as options to the user completing
        /// the step</param>
        /// <param name="facialSimilarity">Defaults to `false`. If this
        /// document is going to be used for a `DOCUMENT_VERIFICATION` that
        /// performs a facial similarity check, enabling this will ask the user
        /// to upload a photo of themselves in addition to their
        /// document</param>
        public CollectionStepDocument(DocumentCategory category, IList<DocumentType?> allowedTypes, string id = default(string), bool? facialSimilarity = default(bool?))
        {
            Id = id;
            Category = category;
            FacialSimilarity = facialSimilarity;
            AllowedTypes = allowedTypes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'PROOF_OF_IDENTITY',
        /// 'PROOF_OF_SOURCE_OF_WEALTH', 'PROOF_OF_SOURCE_OF_FUNDS',
        /// 'PROOF_OF_ADDRESS', 'SUPPORTING', 'COMPANY_FILING', 'DATA_SUMMARY',
        /// 'PROOF_OF_BANK_ACCOUNT', 'PROOF_OF_TAX_STATUS'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public DocumentCategory Category { get; set; }

        /// <summary>
        /// Gets or sets defaults to `false`. If this document is going to be
        /// used for a `DOCUMENT_VERIFICATION` that performs a facial
        /// similarity check, enabling this will ask the user to upload a photo
        /// of themselves in addition to their document
        /// </summary>
        [JsonProperty(PropertyName = "facial_similarity")]
        public bool? FacialSimilarity { get; set; }

        /// <summary>
        /// Gets or sets specifies the types of document that are accepted.
        /// These will be presented as options to the user completing the step
        /// </summary>
        [JsonProperty(PropertyName = "allowed_types")]
        public IList<DocumentType?> AllowedTypes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AllowedTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AllowedTypes");
            }
        }
    }
}
