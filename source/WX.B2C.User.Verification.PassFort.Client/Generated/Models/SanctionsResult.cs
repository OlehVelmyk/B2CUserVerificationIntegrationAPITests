// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SanctionsResult
    /// </summary>
    /// <remarks>
    /// Result of a PEPs and Sanctions Check
    /// </remarks>
    public partial class SanctionsResult
    {
        /// <summary>
        /// Initializes a new instance of the SanctionsResult class.
        /// </summary>
        public SanctionsResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SanctionsResult class.
        /// </summary>
        /// <param name="matchId">ID of the Sanction Match</param>
        /// <param name="matchCustomLabel">The provider-specific display name
        /// for this match</param>
        /// <param name="matchName">The name that was matched against</param>
        /// <param name="matchDates">Dates of the matched sanctions</param>
        /// <param name="matchDatesData">Dates of the matched sanctions</param>
        /// <param name="matchCountries">Countries of the matched sanctions
        /// relating to national origin</param>
        /// <param name="matchCountriesAddress">Countries of the matched
        /// sanctions relating to location</param>
        /// <param name="matchCountriesData">Countries of the matched sanctions
        /// relating to national origin</param>
        /// <param name="score">The score of the match</param>
        /// <param name="sanctions">The sanctions returned from check</param>
        /// <param name="media">Adverse Media results</param>
        /// <param name="documents">Documents returned by the check</param>
        /// <param name="aliases">Aliases used by the matched</param>
        /// <param name="previousNames">Previous names used by the
        /// matched</param>
        /// <param name="associates">Associated to the returned PEPs and
        /// Sanctions</param>
        /// <param name="profileNotes">Profile notes returned by check</param>
        /// <param name="details">More information about the match</param>
        /// <param name="sources">Sources listed by data provider</param>
        /// <param name="isEnhanced">If this is an enchanced Sanctions
        /// result</param>
        /// <param name="gender">Gender of match</param>
        /// <param name="pepRating">PEP Rating</param>
        /// <param name="remarks">Sanction remarks from data provider</param>
        /// <param name="deceased">If the result is deceased</param>
        /// <param name="disqualifiedDirector">If the result is a disqualified
        /// director</param>
        /// <param name="insolvent">If the result is a insolvent</param>
        /// <param name="lawEnforcement">If the result is a member of law
        /// enforcement</param>
        /// <param name="riskography">Description of PEP or sanctioned persons
        /// background</param>
        /// <param name="deceasedDates">Reported death dates</param>
        /// <param name="inactiveAsRcaRelatedToPepDates">Dates of relation to
        /// PEP cessation</param>
        /// <param name="inactiveAsPepDates">Dates of PEP inactivity</param>
        /// <param name="identifications">Identifications such as a
        /// passport</param>
        /// <param name="locations">Locations related to a PEP or sanctioned
        /// entity, such as birth place</param>
        public SanctionsResult(string matchId = default(string), string modifiedDate = default(string), FalsePositive falsePositive = default(FalsePositive), string matchCustomLabel = default(string), string matchName = default(string), IList<string> matchDates = default(IList<string>), IList<DateMatchData> matchDatesData = default(IList<DateMatchData>), IList<string> matchCountries = default(IList<string>), IList<string> matchCountriesAddress = default(IList<string>), IList<CountryMatchData> matchCountriesData = default(IList<CountryMatchData>), double? score = default(double?), IList<Sanction> sanctions = default(IList<Sanction>), PEP pep = default(PEP), IList<MediaArticle> media = default(IList<MediaArticle>), IList<Document> documents = default(IList<Document>), IList<string> aliases = default(IList<string>), IList<string> previousNames = default(IList<string>), IList<Associate> associates = default(IList<Associate>), string profileNotes = default(string), IList<MatchDetail> details = default(IList<MatchDetail>), IList<Source> sources = default(IList<Source>), bool? isEnhanced = default(bool?), string gender = default(string), string pepRating = default(string), IList<string> remarks = default(IList<string>), bool? deceased = default(bool?), bool? disqualifiedDirector = default(bool?), bool? insolvent = default(bool?), bool? lawEnforcement = default(bool?), string riskography = default(string), IList<string> deceasedDates = default(IList<string>), IList<string> inactiveAsRcaRelatedToPepDates = default(IList<string>), IList<string> inactiveAsPepDates = default(IList<string>), IList<Identification> identifications = default(IList<Identification>), IList<Location> locations = default(IList<Location>))
        {
            MatchId = matchId;
            ModifiedDate = modifiedDate;
            FalsePositive = falsePositive;
            MatchCustomLabel = matchCustomLabel;
            MatchName = matchName;
            MatchDates = matchDates;
            MatchDatesData = matchDatesData;
            MatchCountries = matchCountries;
            MatchCountriesAddress = matchCountriesAddress;
            MatchCountriesData = matchCountriesData;
            Score = score;
            Sanctions = sanctions;
            Pep = pep;
            Media = media;
            Documents = documents;
            Aliases = aliases;
            PreviousNames = previousNames;
            Associates = associates;
            ProfileNotes = profileNotes;
            Details = details;
            Sources = sources;
            IsEnhanced = isEnhanced;
            Gender = gender;
            PepRating = pepRating;
            Remarks = remarks;
            Deceased = deceased;
            DisqualifiedDirector = disqualifiedDirector;
            Insolvent = insolvent;
            LawEnforcement = lawEnforcement;
            Riskography = riskography;
            DeceasedDates = deceasedDates;
            InactiveAsRcaRelatedToPepDates = inactiveAsRcaRelatedToPepDates;
            InactiveAsPepDates = inactiveAsPepDates;
            Identifications = identifications;
            Locations = locations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ID of the Sanction Match
        /// </summary>
        [JsonProperty(PropertyName = "match_id")]
        public string MatchId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modified_date")]
        public string ModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "false_positive")]
        public FalsePositive FalsePositive { get; set; }

        /// <summary>
        /// Gets or sets the provider-specific display name for this match
        /// </summary>
        [JsonProperty(PropertyName = "match_custom_label")]
        public string MatchCustomLabel { get; set; }

        /// <summary>
        /// Gets or sets the name that was matched against
        /// </summary>
        [JsonProperty(PropertyName = "match_name")]
        public string MatchName { get; set; }

        /// <summary>
        /// Gets or sets dates of the matched sanctions
        /// </summary>
        [JsonProperty(PropertyName = "match_dates")]
        public IList<string> MatchDates { get; set; }

        /// <summary>
        /// Gets or sets dates of the matched sanctions
        /// </summary>
        [JsonProperty(PropertyName = "match_dates_data")]
        public IList<DateMatchData> MatchDatesData { get; set; }

        /// <summary>
        /// Gets or sets countries of the matched sanctions relating to
        /// national origin
        /// </summary>
        [JsonProperty(PropertyName = "match_countries")]
        public IList<string> MatchCountries { get; set; }

        /// <summary>
        /// Gets or sets countries of the matched sanctions relating to
        /// location
        /// </summary>
        [JsonProperty(PropertyName = "match_countries_address")]
        public IList<string> MatchCountriesAddress { get; set; }

        /// <summary>
        /// Gets or sets countries of the matched sanctions relating to
        /// national origin
        /// </summary>
        [JsonProperty(PropertyName = "match_countries_data")]
        public IList<CountryMatchData> MatchCountriesData { get; set; }

        /// <summary>
        /// Gets or sets the score of the match
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; set; }

        /// <summary>
        /// Gets or sets the sanctions returned from check
        /// </summary>
        [JsonProperty(PropertyName = "sanctions")]
        public IList<Sanction> Sanctions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pep")]
        public PEP Pep { get; set; }

        /// <summary>
        /// Gets or sets adverse Media results
        /// </summary>
        [JsonProperty(PropertyName = "media")]
        public IList<MediaArticle> Media { get; set; }

        /// <summary>
        /// Gets or sets documents returned by the check
        /// </summary>
        [JsonProperty(PropertyName = "documents")]
        public IList<Document> Documents { get; set; }

        /// <summary>
        /// Gets or sets aliases used by the matched
        /// </summary>
        [JsonProperty(PropertyName = "aliases")]
        public IList<string> Aliases { get; set; }

        /// <summary>
        /// Gets or sets previous names used by the matched
        /// </summary>
        [JsonProperty(PropertyName = "previous_names")]
        public IList<string> PreviousNames { get; set; }

        /// <summary>
        /// Gets or sets associated to the returned PEPs and Sanctions
        /// </summary>
        [JsonProperty(PropertyName = "associates")]
        public IList<Associate> Associates { get; set; }

        /// <summary>
        /// Gets or sets profile notes returned by check
        /// </summary>
        [JsonProperty(PropertyName = "profile_notes")]
        public string ProfileNotes { get; set; }

        /// <summary>
        /// Gets or sets more information about the match
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public IList<MatchDetail> Details { get; set; }

        /// <summary>
        /// Gets or sets sources listed by data provider
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<Source> Sources { get; set; }

        /// <summary>
        /// Gets or sets if this is an enchanced Sanctions result
        /// </summary>
        [JsonProperty(PropertyName = "is_enhanced")]
        public bool? IsEnhanced { get; set; }

        /// <summary>
        /// Gets or sets gender of match
        /// </summary>
        [JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or sets PEP Rating
        /// </summary>
        [JsonProperty(PropertyName = "pep_rating")]
        public string PepRating { get; set; }

        /// <summary>
        /// Gets or sets sanction remarks from data provider
        /// </summary>
        [JsonProperty(PropertyName = "remarks")]
        public IList<string> Remarks { get; set; }

        /// <summary>
        /// Gets or sets if the result is deceased
        /// </summary>
        [JsonProperty(PropertyName = "deceased")]
        public bool? Deceased { get; set; }

        /// <summary>
        /// Gets or sets if the result is a disqualified director
        /// </summary>
        [JsonProperty(PropertyName = "disqualified_director")]
        public bool? DisqualifiedDirector { get; set; }

        /// <summary>
        /// Gets or sets if the result is a insolvent
        /// </summary>
        [JsonProperty(PropertyName = "insolvent")]
        public bool? Insolvent { get; set; }

        /// <summary>
        /// Gets or sets if the result is a member of law enforcement
        /// </summary>
        [JsonProperty(PropertyName = "law_enforcement")]
        public bool? LawEnforcement { get; set; }

        /// <summary>
        /// Gets or sets description of PEP or sanctioned persons background
        /// </summary>
        [JsonProperty(PropertyName = "riskography")]
        public string Riskography { get; set; }

        /// <summary>
        /// Gets or sets reported death dates
        /// </summary>
        [JsonProperty(PropertyName = "deceased_dates")]
        public IList<string> DeceasedDates { get; set; }

        /// <summary>
        /// Gets or sets dates of relation to PEP cessation
        /// </summary>
        [JsonProperty(PropertyName = "inactive_as_rca_related_to_pep_dates")]
        public IList<string> InactiveAsRcaRelatedToPepDates { get; set; }

        /// <summary>
        /// Gets or sets dates of PEP inactivity
        /// </summary>
        [JsonProperty(PropertyName = "inactive_as_pep_dates")]
        public IList<string> InactiveAsPepDates { get; set; }

        /// <summary>
        /// Gets or sets identifications such as a passport
        /// </summary>
        [JsonProperty(PropertyName = "identifications")]
        public IList<Identification> Identifications { get; set; }

        /// <summary>
        /// Gets or sets locations related to a PEP or sanctioned entity, such
        /// as birth place
        /// </summary>
        [JsonProperty(PropertyName = "locations")]
        public IList<Location> Locations { get; set; }

    }
}
