// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ProductApplication
    /// </summary>
    /// <remarks>
    /// A product application on a profile
    /// </remarks>
    public partial class ProductApplication
    {
        /// <summary>
        /// Initializes a new instance of the ProductApplication class.
        /// </summary>
        public ProductApplication()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProductApplication class.
        /// </summary>
        /// <param name="associatedRole">Possible values include:
        /// 'AUTHORIZED_PERSON', 'UNAUTHORIZED_PERSON', 'DIRECTOR',
        /// 'COMPANY_SECRETARY', 'SHAREHOLDER', 'PARTNER', 'TRUSTEE',
        /// 'BENEFICIAL_OWNER', 'RESIGNED_OFFICER', 'OTHER'</param>
        /// <param name="status">Possible values include: 'APPLIED',
        /// 'APPROVED', 'IN_REVIEW', 'REJECTED', 'CANCELLED'</param>
        /// <param name="flag">Possible values include: 'AUTOMATING',
        /// 'DECIDED', 'WAITING_ON_COLLECTION_STEPS', 'WAITING_ON_CHECKS',
        /// 'REQUIRES_MANUAL_TASK_COMPLETION', 'READY_FOR_DECISION',
        /// 'REQUIRES_DATA', 'REQUIRES_RISK_SCORE', 'RECALCULATING_RISK',
        /// 'NEARING_EXPIRY', 'WAITING_ON_ESCALATION'</param>
        /// <param name="requiredTasks">The tasks that are required to be
        /// completed for this product application to be approved</param>
        /// <param name="history">A history of the previous application
        /// statuses that the profile has been through for this product</param>
        /// <param name="flagHistory">A history of the previous application
        /// statuses and flags that the profile has been through for this
        /// product</param>
        /// <param name="approvalBlockers">Actions that need to be completed
        /// before the profile can be approved</param>
        /// <param name="hidden">If this product application is hidden</param>
        /// <param name="risk">Risk result</param>
        public ProductApplication(string id = default(string), ProductResource product = default(ProductResource), string associatedRole = default(string), string status = default(string), string flag = default(string), IList<TaskVariant> requiredTasks = default(IList<TaskVariant>), IList<ProductApplicationStatusChange> history = default(IList<ProductApplicationStatusChange>), IList<ProductApplicationFlagHistoryItem> flagHistory = default(IList<ProductApplicationFlagHistoryItem>), IList<ApprovalBlocker> approvalBlockers = default(IList<ApprovalBlocker>), bool? hidden = default(bool?), string willExpireAt = default(string), ProductApplicationRisk risk = default(ProductApplicationRisk))
        {
            Id = id;
            Product = product;
            AssociatedRole = associatedRole;
            Status = status;
            Flag = flag;
            RequiredTasks = requiredTasks;
            History = history;
            FlagHistory = flagHistory;
            ApprovalBlockers = approvalBlockers;
            Hidden = hidden;
            WillExpireAt = willExpireAt;
            Risk = risk;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product")]
        public ProductResource Product { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AUTHORIZED_PERSON',
        /// 'UNAUTHORIZED_PERSON', 'DIRECTOR', 'COMPANY_SECRETARY',
        /// 'SHAREHOLDER', 'PARTNER', 'TRUSTEE', 'BENEFICIAL_OWNER',
        /// 'RESIGNED_OFFICER', 'OTHER'
        /// </summary>
        [JsonProperty(PropertyName = "associated_role")]
        public string AssociatedRole { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'APPLIED', 'APPROVED',
        /// 'IN_REVIEW', 'REJECTED', 'CANCELLED'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AUTOMATING', 'DECIDED',
        /// 'WAITING_ON_COLLECTION_STEPS', 'WAITING_ON_CHECKS',
        /// 'REQUIRES_MANUAL_TASK_COMPLETION', 'READY_FOR_DECISION',
        /// 'REQUIRES_DATA', 'REQUIRES_RISK_SCORE', 'RECALCULATING_RISK',
        /// 'NEARING_EXPIRY', 'WAITING_ON_ESCALATION'
        /// </summary>
        [JsonProperty(PropertyName = "flag")]
        public string Flag { get; set; }

        /// <summary>
        /// Gets or sets the tasks that are required to be completed for this
        /// product application to be approved
        /// </summary>
        [JsonProperty(PropertyName = "required_tasks")]
        public IList<TaskVariant> RequiredTasks { get; set; }

        /// <summary>
        /// Gets or sets a history of the previous application statuses that
        /// the profile has been through for this product
        /// </summary>
        [JsonProperty(PropertyName = "history")]
        public IList<ProductApplicationStatusChange> History { get; set; }

        /// <summary>
        /// Gets or sets a history of the previous application statuses and
        /// flags that the profile has been through for this product
        /// </summary>
        [JsonProperty(PropertyName = "flag_history")]
        public IList<ProductApplicationFlagHistoryItem> FlagHistory { get; set; }

        /// <summary>
        /// Gets or sets actions that need to be completed before the profile
        /// can be approved
        /// </summary>
        [JsonProperty(PropertyName = "approval_blockers")]
        public IList<ApprovalBlocker> ApprovalBlockers { get; set; }

        /// <summary>
        /// Gets or sets if this product application is hidden
        /// </summary>
        [JsonProperty(PropertyName = "hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "will_expire_at")]
        public string WillExpireAt { get; set; }

        /// <summary>
        /// Gets or sets risk result
        /// </summary>
        [JsonProperty(PropertyName = "risk")]
        public ProductApplicationRisk Risk { get; set; }

    }
}
