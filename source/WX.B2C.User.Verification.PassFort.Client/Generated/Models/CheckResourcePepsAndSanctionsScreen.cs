// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// CheckResourcePepsAndSanctionsScreen
    /// </summary>
    /// <remarks>
    /// For details refer to [Check
    /// Reference](/reference/checks/individuals/peps-and-sanctions)
    /// </remarks>
    [Newtonsoft.Json.JsonObject("PEPS_AND_SANCTIONS_SCREEN")]
    public partial class CheckResourcePepsAndSanctionsScreen : CheckResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CheckResourcePepsAndSanctionsScreen class.
        /// </summary>
        public CheckResourcePepsAndSanctionsScreen()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CheckResourcePepsAndSanctionsScreen class.
        /// </summary>
        /// <param name="state">Possible values include: 'PENDING', 'RUNNING',
        /// 'COMPLETE'</param>
        /// <param name="errors">An array of errors that occurred when the
        /// check was performed. Hopefully empty!</param>
        /// <param name="taskIds">The tasks related to this check</param>
        /// <param name="instructedExternally">Whether the check ran externally
        /// and contains the formatted result</param>
        /// <param name="decision">Possible values include: 'PASS', 'FAIL',
        /// 'PARTIAL', 'WARN', 'ERROR'</param>
        /// <param name="providers">An array of records on the providers that
        /// were used to run this check</param>
        /// <param name="disableInitialScreen">Defaults to `false`.  If `true`
        /// do not perform an initial screen and only monitor</param>
        /// <param name="disableMonitoring">Defaults to `false`. If `true`
        /// ongoing monitoring will be disabled</param>
        /// <param name="outputData">The resultant output of the check.
        ///
        /// **Note**: This was correct at the time the check was performed.
        /// Some check types will go out of date over time</param>
        /// <param name="result">Possible values include: 'Pass', 'Refer',
        /// 'PEP', 'Sanction', 'Media', 'Error', 'Partial', 'Fail', '2+2',
        /// '1+1'</param>
        public CheckResourcePepsAndSanctionsScreen(string id = default(string), CheckVariant variant = default(CheckVariant), CheckState? state = default(CheckState?), string performedOn = default(string), IList<Error> errors = default(IList<Error>), IList<string> taskIds = default(IList<string>), bool? instructedExternally = default(bool?), DecisionClass? decision = default(DecisionClass?), IList<CheckResourceProvidersItem> providers = default(IList<CheckResourceProvidersItem>), bool? disableInitialScreen = default(bool?), bool? disableMonitoring = default(bool?), IndividualData inputData = default(IndividualData), CheckResourcePepsAndSanctionsScreenOutputData outputData = default(CheckResourcePepsAndSanctionsScreenOutputData), CheckResult? result = default(CheckResult?))
            : base(id, variant, state, performedOn, errors, taskIds, instructedExternally, decision, providers)
        {
            DisableInitialScreen = disableInitialScreen;
            DisableMonitoring = disableMonitoring;
            InputData = inputData;
            OutputData = outputData;
            Result = result;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets defaults to `false`.  If `true` do not perform an
        /// initial screen and only monitor
        /// </summary>
        [JsonProperty(PropertyName = "disable_initial_screen")]
        public bool? DisableInitialScreen { get; set; }

        /// <summary>
        /// Gets or sets defaults to `false`. If `true` ongoing monitoring will
        /// be disabled
        /// </summary>
        [JsonProperty(PropertyName = "disable_monitoring")]
        public bool? DisableMonitoring { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "input_data")]
        public IndividualData InputData { get; set; }

        /// <summary>
        /// Gets or sets the resultant output of the check.
        ///
        /// **Note**: This was correct at the time the check was performed.
        /// Some check types will go out of date over time
        /// </summary>
        [JsonProperty(PropertyName = "output_data")]
        public CheckResourcePepsAndSanctionsScreenOutputData OutputData { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Pass', 'Refer', 'PEP',
        /// 'Sanction', 'Media', 'Error', 'Partial', 'Fail', '2+2', '1+1'
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public CheckResult? Result { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (InputData != null)
            {
                InputData.Validate();
            }
        }
    }
}
