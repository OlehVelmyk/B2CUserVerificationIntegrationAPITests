// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// StructuredAddress
    /// </summary>
    /// <remarks>
    /// Structured address format
    /// </remarks>
    [Newtonsoft.Json.JsonObject("STRUCTURED")]
    public partial class StructuredAddress : Address
    {
        /// <summary>
        /// Initializes a new instance of the StructuredAddress class.
        /// </summary>
        public StructuredAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StructuredAddress class.
        /// </summary>
        /// <param name="country">Possible values include: 'AFG', 'ALA', 'ALB',
        /// 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM',
        /// 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR',
        /// 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA',
        /// 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR',
        /// 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK',
        /// 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB',
        /// 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY',
        /// 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN',
        /// 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA',
        /// 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN',
        /// 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL',
        /// 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM',
        /// 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT',
        /// 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU',
        /// 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT',
        /// 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO',
        /// 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL',
        /// 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP',
        /// 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER',
        /// 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'RKS', 'ROU',
        /// 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT',
        /// 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP',
        /// 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'ESP', 'LKA',
        /// 'SDN', 'SUR', 'SSD', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN',
        /// 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN',
        /// 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA',
        /// 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF',
        /// 'ESH', 'XXX', 'YEM', 'ZMB', 'ZWE', 'UNK', 'ZZZ'</param>
        /// <param name="stateProvince">The state, province, or territory in
        /// which the address is located. This is required for addresses in the
        /// US or Canada.
        ///
        /// _Note that a UK county should not go here.
        ///
        /// The format follows ISO-3166-2 but only the state code as country is
        /// already present in its own field.</param>
        /// <param name="county">The county in which the address is located.
        ///
        /// _Note that a US state or Canadian province or territory should not
        /// go here._</param>
        /// <param name="postalCode">The postal code or zip code for the
        /// address.</param>
        /// <param name="locality">The city or town in which the address is
        /// located.</param>
        /// <param name="route">The route or street name on which address is
        /// located.</param>
        /// <param name="streetNumber">The street number of the
        /// address.</param>
        /// <param name="premise">The name of the building.</param>
        /// <param name="subpremise">A subaddress within the building. This is
        /// typically a flat number or apartment number.</param>
        /// <param name="originalFreeformAddress">The original freeform
        /// address, prior to structuring attempts.</param>
        /// <param name="originalStructuredAddress">This object has been
        /// deprecated. The value will be the same as the `STRUCTURED`
        /// address.</param>
        /// <param name="longitude">Longitude of coordinate (-180.0 to
        /// 80.0)</param>
        /// <param name="latitude">Latitude of coordinate (-90.0 to
        /// 90.0)</param>
        public StructuredAddress(string country, string stateProvince = default(string), string county = default(string), string postalCode = default(string), string locality = default(string), string route = default(string), string streetNumber = default(string), string premise = default(string), string subpremise = default(string), string originalFreeformAddress = default(string), object originalStructuredAddress = default(object), double? longitude = default(double?), double? latitude = default(double?))
        {
            Country = country;
            StateProvince = stateProvince;
            County = county;
            PostalCode = postalCode;
            Locality = locality;
            Route = route;
            StreetNumber = streetNumber;
            Premise = premise;
            Subpremise = subpremise;
            OriginalFreeformAddress = originalFreeformAddress;
            OriginalStructuredAddress = originalStructuredAddress;
            Longitude = longitude;
            Latitude = latitude;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'AFG', 'ALA', 'ALB', 'DZA',
        /// 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW',
        /// 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL',
        /// 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT',
        /// 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN',
        /// 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL',
        /// 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW',
        /// 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV',
        /// 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA',
        /// 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB',
        /// 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB',
        /// 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND',
        /// 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN',
        /// 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ',
        /// 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX',
        /// 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL',
        /// 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG',
        /// 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD',
        /// 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR',
        /// 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL',
        /// 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'RKS', 'ROU', 'RUS',
        /// 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM',
        /// 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM',
        /// 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'ESP', 'LKA', 'SDN',
        /// 'SUR', 'SSD', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK',
        /// 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR',
        /// 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI',
        /// 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH',
        /// 'XXX', 'YEM', 'ZMB', 'ZWE', 'UNK', 'ZZZ'
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets the state, province, or territory in which the address
        /// is located. This is required for addresses in the US or Canada.
        ///
        /// _Note that a UK county should not go here.
        ///
        /// The format follows ISO-3166-2 but only the state code as country is
        /// already present in its own field.
        /// </summary>
        [JsonProperty(PropertyName = "state_province")]
        public string StateProvince { get; set; }

        /// <summary>
        /// Gets or sets the county in which the address is located.
        ///
        /// _Note that a US state or Canadian province or territory should not
        /// go here._
        /// </summary>
        [JsonProperty(PropertyName = "county")]
        public string County { get; set; }

        /// <summary>
        /// Gets or sets the postal code or zip code for the address.
        /// </summary>
        [JsonProperty(PropertyName = "postal_code")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the city or town in which the address is located.
        /// </summary>
        [JsonProperty(PropertyName = "locality")]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or sets the route or street name on which address is located.
        /// </summary>
        [JsonProperty(PropertyName = "route")]
        public string Route { get; set; }

        /// <summary>
        /// Gets or sets the street number of the address.
        /// </summary>
        [JsonProperty(PropertyName = "street_number")]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or sets the name of the building.
        /// </summary>
        [JsonProperty(PropertyName = "premise")]
        public string Premise { get; set; }

        /// <summary>
        /// Gets or sets a subaddress within the building. This is typically a
        /// flat number or apartment number.
        /// </summary>
        [JsonProperty(PropertyName = "subpremise")]
        public string Subpremise { get; set; }

        /// <summary>
        /// Gets or sets the original freeform address, prior to structuring
        /// attempts.
        /// </summary>
        [JsonProperty(PropertyName = "original_freeform_address")]
        public string OriginalFreeformAddress { get; set; }

        /// <summary>
        /// Gets or sets this object has been deprecated. The value will be the
        /// same as the `STRUCTURED` address.
        /// </summary>
        [JsonProperty(PropertyName = "original_structured_address")]
        public object OriginalStructuredAddress { get; set; }

        /// <summary>
        /// Gets or sets longitude of coordinate (-180.0 to 80.0)
        /// </summary>
        [JsonProperty(PropertyName = "longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or sets latitude of coordinate (-90.0 to 90.0)
        /// </summary>
        [JsonProperty(PropertyName = "latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Country == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Country");
            }
        }
    }
}
