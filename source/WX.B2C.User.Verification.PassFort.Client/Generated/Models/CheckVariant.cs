// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// CheckVariant
    /// </summary>
    /// <remarks>
    /// The identifier of a variant of a check.
    /// </remarks>
    public partial class CheckVariant
    {
        /// <summary>
        /// Initializes a new instance of the CheckVariant class.
        /// </summary>
        public CheckVariant()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckVariant class.
        /// </summary>
        /// <param name="alias">Alias of the check variant</param>
        /// <param name="name">Name of the check variant</param>
        public CheckVariant(string id, string alias = default(string), string name = default(string))
        {
            Id = id;
            Alias = alias;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets alias of the check variant
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or sets name of the check variant
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
