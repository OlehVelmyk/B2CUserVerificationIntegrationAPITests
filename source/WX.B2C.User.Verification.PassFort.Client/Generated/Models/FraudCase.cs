// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// FraudCase
    /// </summary>
    /// <remarks>
    /// An individual fraud detection case
    /// </remarks>
    public partial class FraudCase
    {
        /// <summary>
        /// Initializes a new instance of the FraudCase class.
        /// </summary>
        public FraudCase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FraudCase class.
        /// </summary>
        /// <param name="databaseType">Possible values include: 'CIFAS'</param>
        /// <param name="id">The identifier for the case.</param>
        /// <param name="reportingCompany">The company which reported the
        /// case.</param>
        /// <param name="caseType">The underlying type of fraud.</param>
        /// <param name="product">The type of product associated to the
        /// fraud.</param>
        /// <param name="doNotFilter">Certain types of Case must always be
        /// reviewed when received in search results - they must not be
        /// filtered out by any automated processing.</param>
        /// <param name="filingReason">The company which reported the
        /// case</param>
        public FraudCase(string databaseType = default(string), string id = default(string), string reportingCompany = default(string), string caseType = default(string), string product = default(string), bool? doNotFilter = default(bool?), string supplyDate = default(string), string applicationDate = default(string), string claimDate = default(string), IList<string> filingReason = default(IList<string>))
        {
            DatabaseType = databaseType;
            Id = id;
            ReportingCompany = reportingCompany;
            CaseType = caseType;
            Product = product;
            DoNotFilter = doNotFilter;
            SupplyDate = supplyDate;
            ApplicationDate = applicationDate;
            ClaimDate = claimDate;
            FilingReason = filingReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'CIFAS'
        /// </summary>
        [JsonProperty(PropertyName = "database_type")]
        public string DatabaseType { get; set; }

        /// <summary>
        /// Gets or sets the identifier for the case.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the company which reported the case.
        /// </summary>
        [JsonProperty(PropertyName = "reporting_company")]
        public string ReportingCompany { get; set; }

        /// <summary>
        /// Gets or sets the underlying type of fraud.
        /// </summary>
        [JsonProperty(PropertyName = "case_type")]
        public string CaseType { get; set; }

        /// <summary>
        /// Gets or sets the type of product associated to the fraud.
        /// </summary>
        [JsonProperty(PropertyName = "product")]
        public string Product { get; set; }

        /// <summary>
        /// Gets or sets certain types of Case must always be reviewed when
        /// received in search results - they must not be filtered out by any
        /// automated processing.
        /// </summary>
        [JsonProperty(PropertyName = "do_not_filter")]
        public bool? DoNotFilter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supply_date")]
        public string SupplyDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "application_date")]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "claim_date")]
        public string ClaimDate { get; set; }

        /// <summary>
        /// Gets or sets the company which reported the case
        /// </summary>
        [JsonProperty(PropertyName = "filing_reason")]
        public IList<string> FilingReason { get; set; }

    }
}
