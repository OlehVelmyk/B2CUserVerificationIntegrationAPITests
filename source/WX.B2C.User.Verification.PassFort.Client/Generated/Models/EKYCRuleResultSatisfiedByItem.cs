// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class EKYCRuleResultSatisfiedByItem
    {
        /// <summary>
        /// Initializes a new instance of the EKYCRuleResultSatisfiedByItem
        /// class.
        /// </summary>
        public EKYCRuleResultSatisfiedByItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EKYCRuleResultSatisfiedByItem
        /// class.
        /// </summary>
        /// <param name="databaseName">The name of the database used to match
        /// the required fields to this rule</param>
        /// <param name="matchedFields">A list of all fields matched against
        /// the database</param>
        /// <param name="requiredFields">The subset of fields matched from the
        /// database that were required by this rule</param>
        /// <param name="count">In most cases the count will be one. However,
        /// if this rule does not require distinct sources, then this count may
        /// be more than one. For example, this could indicate that a
        /// requirement of two address matches were both satisfied by the same
        /// database.</param>
        public EKYCRuleResultSatisfiedByItem(string databaseName = default(string), IList<string> matchedFields = default(IList<string>), IList<string> requiredFields = default(IList<string>), int? count = default(int?))
        {
            DatabaseName = databaseName;
            MatchedFields = matchedFields;
            RequiredFields = requiredFields;
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the database used to match the required
        /// fields to this rule
        /// </summary>
        [JsonProperty(PropertyName = "database_name")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets a list of all fields matched against the database
        /// </summary>
        [JsonProperty(PropertyName = "matched_fields")]
        public IList<string> MatchedFields { get; set; }

        /// <summary>
        /// Gets or sets the subset of fields matched from the database that
        /// were required by this rule
        /// </summary>
        [JsonProperty(PropertyName = "required_fields")]
        public IList<string> RequiredFields { get; set; }

        /// <summary>
        /// Gets or sets in most cases the count will be one. However, if this
        /// rule does not require distinct sources, then this count may be more
        /// than one. For example, this could indicate that a requirement of
        /// two address matches were both satisfied by the same database.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

    }
}
