// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// IndividualData
    /// </summary>
    /// <remarks>
    /// Top-level data field for individuals
    /// </remarks>
    public partial class IndividualData : EntityDataBase
    {
        /// <summary>
        /// Initializes a new instance of the IndividualData class.
        /// </summary>
        public IndividualData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IndividualData class.
        /// </summary>
        /// <param name="customerRef">You can supply your own reference to an
        /// entity. This might correspond to your database models.
        ///
        /// This reference is included in webhooks</param>
        /// <param name="documents">Set of documents to submit</param>
        /// <param name="externalRefs">References used to pull data directly
        /// from external providers</param>
        /// <param name="entityType">You must include set the entity_type as
        /// `INDIVIDUAL` to distinguish IndividualData from other types of
        /// EntityData. Possible values include: 'INDIVIDUAL'</param>
        /// <param name="bankingDetails">Individual's banking details</param>
        /// <param name="contactDetails">Phone number and email address</param>
        /// <param name="documentsMetadata">Any additional identity numbers
        /// that individual has. Note that the individual's national identity
        /// number(s) is stored in
        /// `personal_details.national_identity_number`.</param>
        public IndividualData(IDictionary<string, object> customFieldsData = default(IDictionary<string, object>), string customerRef = default(string), IList<Document> documents = default(IList<Document>), EntityDataBaseExternalRefs externalRefs = default(EntityDataBaseExternalRefs), FraudDetection fraudDetection = default(FraudDetection), string entityType = default(string), PersonalDetails personalDetails = default(PersonalDetails), IList<DatedAddressHistoryItem> addressHistory = default(IList<DatedAddressHistoryItem>), IndividualDataBankingDetails bankingDetails = default(IndividualDataBankingDetails), IndividualDataContactDetails contactDetails = default(IndividualDataContactDetails), IPLocation ipLocation = default(IPLocation), IList<DocumentMetadataIdentityNumber> documentsMetadata = default(IList<DocumentMetadataIdentityNumber>))
            : base(customFieldsData, customerRef, documents, externalRefs, fraudDetection)
        {
            EntityType = entityType;
            PersonalDetails = personalDetails;
            AddressHistory = addressHistory;
            BankingDetails = bankingDetails;
            ContactDetails = contactDetails;
            IpLocation = ipLocation;
            DocumentsMetadata = documentsMetadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets you must include set the entity_type as `INDIVIDUAL`
        /// to distinguish IndividualData from other types of EntityData.
        /// Possible values include: 'INDIVIDUAL'
        /// </summary>
        [JsonProperty(PropertyName = "entity_type")]
        public string EntityType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "personal_details")]
        public PersonalDetails PersonalDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "address_history")]
        public IList<DatedAddressHistoryItem> AddressHistory { get; set; }

        /// <summary>
        /// Gets or sets individual's banking details
        /// </summary>
        [JsonProperty(PropertyName = "banking_details")]
        public IndividualDataBankingDetails BankingDetails { get; set; }

        /// <summary>
        /// Gets or sets phone number and email address
        /// </summary>
        [JsonProperty(PropertyName = "contact_details")]
        public IndividualDataContactDetails ContactDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ip_location")]
        public IPLocation IpLocation { get; set; }

        /// <summary>
        /// Gets or sets any additional identity numbers that individual has.
        /// Note that the individual's national identity number(s) is stored in
        /// `personal_details.national_identity_number`.
        /// </summary>
        [JsonProperty(PropertyName = "documents_metadata")]
        public IList<DocumentMetadataIdentityNumber> DocumentsMetadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AddressHistory != null)
            {
                foreach (var element in AddressHistory)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BankingDetails != null)
            {
                BankingDetails.Validate();
            }
            if (IpLocation != null)
            {
                IpLocation.Validate();
            }
            if (DocumentsMetadata != null)
            {
                foreach (var element1 in DocumentsMetadata)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
