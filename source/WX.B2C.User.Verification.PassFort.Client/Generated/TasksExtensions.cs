// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tasks.
    /// </summary>
    public static partial class TasksExtensions
    {
            /// <summary>
            /// Get all tasks on a profile
            /// </summary>
            /// <remarks>
            /// Returns a list of tasks associated with a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaskResource>> ListAsync(this ITasks operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a task to a profile
            /// </summary>
            /// <remarks>
            /// As mentioned above, products have a default set of tasks which are
            /// automatically created when a user applies. However, if you want to add a
            /// task on a case by case basis, you can use this endpoint
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResource> AddAsync(this ITasks operations, string profileId, TaskRequest body = default(TaskRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a task
            /// </summary>
            /// <remarks>
            /// Returns the specified task against a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='taskId'>
            /// The identifier for the task
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResource> GetAsync(this ITasks operations, string profileId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(profileId, taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Complete a task
            /// </summary>
            /// <remarks>
            /// Update the `is_complete` and `check_ids` fields on a task. All other fields
            /// are ignored
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='taskId'>
            /// The identifier for the task
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResource> CompleteAsync(this ITasks operations, string profileId, string taskId, TaskResource body = default(TaskResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompleteWithHttpMessagesAsync(profileId, taskId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get notes on a task
            /// </summary>
            /// <remarks>
            /// Get notes associated with a task on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='taskId'>
            /// The identifier for the task
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NoteResource>> GetNotesAsync(this ITasks operations, string profileId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotesWithHttpMessagesAsync(profileId, taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a note to a task
            /// </summary>
            /// <remarks>
            /// Add a note to a task on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='taskId'>
            /// The identifier for the task
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NoteResource> AddNoteAsync(this ITasks operations, string profileId, string taskId, CreateNoteResource body = default(CreateNoteResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddNoteWithHttpMessagesAsync(profileId, taskId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a note
            /// </summary>
            /// <remarks>
            /// Remove a note from a task (will not be removed from audit log)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='taskId'>
            /// The identifier for the task
            /// </param>
            /// <param name='noteId'>
            /// The identifier for the note
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNoteAsync(this ITasks operations, string profileId, string taskId, string noteId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNoteWithHttpMessagesAsync(profileId, taskId, noteId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
