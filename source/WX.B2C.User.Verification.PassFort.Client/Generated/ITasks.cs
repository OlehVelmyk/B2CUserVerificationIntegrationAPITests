// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Tasks operations.
    /// </summary>
    public partial interface ITasks
    {
        /// <summary>
        /// Get all tasks on a profile
        /// </summary>
        /// <remarks>
        /// Returns a list of tasks associated with a profile
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<TaskResource>>> ListWithHttpMessagesAsync(string profileId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a task to a profile
        /// </summary>
        /// <remarks>
        /// As mentioned above, products have a default set of tasks which are
        /// automatically created when a user applies. However, if you want to
        /// add a task on a case by case basis, you can use this endpoint
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='body'>
        /// Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TaskResource>> AddWithHttpMessagesAsync(string profileId, TaskRequest body = default(TaskRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a task
        /// </summary>
        /// <remarks>
        /// Returns the specified task against a profile
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='taskId'>
        /// The identifier for the task
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TaskResource>> GetWithHttpMessagesAsync(string profileId, string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Complete a task
        /// </summary>
        /// <remarks>
        /// Update the `is_complete` and `check_ids` fields on a task. All
        /// other fields are ignored
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='taskId'>
        /// The identifier for the task
        /// </param>
        /// <param name='body'>
        /// Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TaskResource>> CompleteWithHttpMessagesAsync(string profileId, string taskId, TaskResource body = default(TaskResource), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get notes on a task
        /// </summary>
        /// <remarks>
        /// Get notes associated with a task on a profile
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='taskId'>
        /// The identifier for the task
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<NoteResource>>> GetNotesWithHttpMessagesAsync(string profileId, string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a note to a task
        /// </summary>
        /// <remarks>
        /// Add a note to a task on a profile
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='taskId'>
        /// The identifier for the task
        /// </param>
        /// <param name='body'>
        /// Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<NoteResource>> AddNoteWithHttpMessagesAsync(string profileId, string taskId, CreateNoteResource body = default(CreateNoteResource), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a note
        /// </summary>
        /// <remarks>
        /// Remove a note from a task (will not be removed from audit log)
        /// </remarks>
        /// <param name='profileId'>
        /// The identifier for the profile
        /// </param>
        /// <param name='taskId'>
        /// The identifier for the task
        /// </param>
        /// <param name='noteId'>
        /// The identifier for the note
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteNoteWithHttpMessagesAsync(string profileId, string taskId, string noteId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
