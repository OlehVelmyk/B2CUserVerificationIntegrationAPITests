// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tags.
    /// </summary>
    public static partial class TagsExtensions
    {
            /// <summary>
            /// Add tag
            /// </summary>
            /// <remarks>
            /// Add a tag of up to 64 characters to a profile.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile.
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagResource> AddAsync(this ITags operations, string profileId, TagResource body = default(TagResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove tag
            /// </summary>
            /// <remarks>
            /// Remove a tag from a profile.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile.
            /// </param>
            /// <param name='tagId'>
            /// The identifier of the tag to be removed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TagResource> DeleteAsync(this ITags operations, string profileId, string tagId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(profileId, tagId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
