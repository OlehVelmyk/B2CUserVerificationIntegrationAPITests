// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Applications.
    /// </summary>
    public static partial class ApplicationsExtensions
    {
            /// <summary>
            /// Get all product applications on profile
            /// </summary>
            /// <remarks>
            /// Returns a list of product applications associated with a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProductApplication>> ListAsync(this IApplications operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a product application
            /// </summary>
            /// <remarks>
            /// Create a new product application on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductApplication> CreateAsync(this IApplications operations, string profileId, ProductApplication body = default(ProductApplication), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a product application
            /// </summary>
            /// <remarks>
            /// Returns the specified production application against a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='applicationId'>
            /// The identifier for the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductApplication> GetAsync(this IApplications operations, string profileId, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(profileId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a product application
            /// </summary>
            /// <remarks>
            /// Update the status of a product application, e.g. to approve it
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='applicationId'>
            /// The identifier for the application
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductApplication> UpdateAsync(this IApplications operations, string profileId, string applicationId, ProductApplication body = default(ProductApplication), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(profileId, applicationId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revert application decision
            /// </summary>
            /// <remarks>
            /// Recreate an application in case it was accidentally rejected or cancelled
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='applicationId'>
            /// The identifier for the application
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductApplication> RevertDecisionAsync(this IApplications operations, string profileId, string applicationId, ProductApplicationRevertDecision body = default(ProductApplicationRevertDecision), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevertDecisionWithHttpMessagesAsync(profileId, applicationId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
