// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.PassFort.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Profiles.
    /// </summary>
    public static partial class ProfilesExtensions
    {
            /// <summary>
            /// Create a profile
            /// </summary>
            /// <remarks>
            /// Create a new profile. You will need specify the _role_ of the customer,
            /// which will define what rules apply to that customer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResource> CreateAsync(this IProfiles operations, ProfileResource body = default(ProfileResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a profile
            /// </summary>
            /// <remarks>
            /// Returns detailed information a profile. This includes the collected data,
            /// details on the checks that have been run, and information on a profile's
            /// ongoing applications and tasks
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResource> GetAsync(this IProfiles operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get collected data
            /// </summary>
            /// <remarks>
            /// Returns the data which has been collected from the user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndividualData> GetCollectedDataAsync(this IProfiles operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectedDataWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update collected data
            /// </summary>
            /// <remarks>
            /// This allows you to update the collected data on the profile. This may be to
            /// either add more information collected from the customer, or to amend
            /// previously submitted information.
            ///
            /// PassFort does **not** merge data submitted. New data will **replace** the
            /// profile's existing `collected_data`.
            ///
            /// Note that updating data (e.g. amending a date of birth) may invalidate the
            /// results of your previously run checks. PassFort does not currently handle
            /// this for you, and you will need to explicitly detect and rerun these checks
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='ifMatch'>
            /// The current ETag of the collected data to be updated. If this value does
            /// not match the current ETag, a `412` status is returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndividualData> UpdateCollectedDataAsync(this IProfiles operations, string profileId, IndividualData body = default(IndividualData), string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCollectedDataWithHttpMessagesAsync(profileId, body, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a document
            /// </summary>
            /// <remarks>
            /// This is a convenience method to add a document to collected_data without
            /// having to `POST` the entirety of the collected_data
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Document> AddDocumentsAsync(this IProfiles operations, string profileId, DocumentPost body = default(DocumentPost), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDocumentsWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of collection steps
            /// </summary>
            /// <remarks>
            /// Get a list of collection steps on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CollectionStep>> GetCollectionStepsAsync(this IProfiles operations, string profileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionStepsWithHttpMessagesAsync(profileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update profile collection steps
            /// </summary>
            /// <remarks>
            /// Replace the collection steps on a profile
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CollectionStep>> UpdateCollectionStepsAsync(this IProfiles operations, string profileId, IList<CollectionStep> body = default(IList<CollectionStep>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCollectionStepsWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Permanently delete a profile
            /// </summary>
            /// <remarks>
            /// Permantently delete a profile and all associated data. This action cannot
            /// be undone.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileId'>
            /// The identifier for the profile.
            /// </param>
            /// <param name='body'>
            /// Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IProfiles operations, string profileId, ProfileDeletionRequest body = default(ProfileDeletionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(profileId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
