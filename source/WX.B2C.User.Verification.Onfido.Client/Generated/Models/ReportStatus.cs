// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Onfido.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ReportStatus.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ReportStatusConverter))]
    public struct ReportStatus : System.IEquatable<ReportStatus>
    {
        private ReportStatus(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Onfido has made a request to one of its data providers and we are
        /// waiting on their reply.
        /// </summary>
        public static readonly ReportStatus AwaitingData = "awaiting_data";

        /// <summary>
        /// Report is going through manual review.
        /// </summary>
        public static readonly ReportStatus AwaitingApproval = "awaiting_approval";

        /// <summary>
        /// Report is done.
        /// </summary>
        public static readonly ReportStatus Complete = "complete";

        /// <summary>
        /// Report has been cancelled.
        /// </summary>
        public static readonly ReportStatus Withdrawn = "withdrawn";

        /// <summary>
        /// Report is paused until you, i.e. the client, switch it on manually.
        /// Special case used by clients who wants to collect data and run the
        /// reports when they want and not immediately.
        /// </summary>
        public static readonly ReportStatus Paused = "paused";


        /// <summary>
        /// Underlying value of enum ReportStatus
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ReportStatus
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ReportStatus
        /// </summary>
        public bool Equals(ReportStatus e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ReportStatus
        /// </summary>
        public static implicit operator ReportStatus(string value)
        {
            return new ReportStatus(value);
        }

        /// <summary>
        /// Implicit operator to convert ReportStatus to string
        /// </summary>
        public static implicit operator string(ReportStatus e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ReportStatus
        /// </summary>
        public static bool operator == (ReportStatus e1, ReportStatus e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ReportStatus
        /// </summary>
        public static bool operator != (ReportStatus e1, ReportStatus e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ReportStatus
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ReportStatus && Equals((ReportStatus)obj);
        }

        /// <summary>
        /// Returns for hashCode ReportStatus
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
