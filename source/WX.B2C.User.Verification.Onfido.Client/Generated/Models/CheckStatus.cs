// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Onfido.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for CheckStatus.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(CheckStatusConverter))]
    public struct CheckStatus : System.IEquatable<CheckStatus>
    {
        private CheckStatus(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// We are currently processing the check.
        /// </summary>
        public static readonly CheckStatus InProgress = "in_progress";

        /// <summary>
        /// The applicant has not yet submitted the applicant form, either
        /// because they have not started filling the form out or because they
        /// have started but have not finished.
        /// </summary>
        public static readonly CheckStatus AwaitingApplicant = "awaiting_applicant";

        /// <summary>
        /// All reports for the applicant have been completed or withdrawn.
        /// </summary>
        public static readonly CheckStatus Complete = "complete";

        /// <summary>
        /// The check has been withdrawn.
        /// </summary>
        public static readonly CheckStatus Withdrawn = "withdrawn";

        /// <summary>
        /// The check is paused until you (the client) switch it on manually.
        /// Special case used by clients who wants to collect data and run the
        /// checks when they want and not immediately.
        /// </summary>
        public static readonly CheckStatus Paused = "paused";

        /// <summary>
        /// Insufficient or inconsistent information was provided by the
        /// applicant, and the report has been bounced back for further
        /// information.
        /// </summary>
        public static readonly CheckStatus Reopened = "reopened";


        /// <summary>
        /// Underlying value of enum CheckStatus
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for CheckStatus
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type CheckStatus
        /// </summary>
        public bool Equals(CheckStatus e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to CheckStatus
        /// </summary>
        public static implicit operator CheckStatus(string value)
        {
            return new CheckStatus(value);
        }

        /// <summary>
        /// Implicit operator to convert CheckStatus to string
        /// </summary>
        public static implicit operator string(CheckStatus e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum CheckStatus
        /// </summary>
        public static bool operator == (CheckStatus e1, CheckStatus e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum CheckStatus
        /// </summary>
        public static bool operator != (CheckStatus e1, CheckStatus e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for CheckStatus
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is CheckStatus && Equals((CheckStatus)obj);
        }

        /// <summary>
        /// Returns for hashCode CheckStatus
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
