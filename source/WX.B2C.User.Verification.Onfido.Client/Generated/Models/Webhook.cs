// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Onfido.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Webhook
    {
        /// <summary>
        /// Initializes a new instance of the Webhook class.
        /// </summary>
        public Webhook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Webhook class.
        /// </summary>
        /// <param name="url">The url that will listen to notifications (must
        /// be https).</param>
        /// <param name="id">The unique identifier of the webhook.
        /// Read-only.</param>
        /// <param name="token">Webhook secret token used to sign the webhook's
        /// payload. Read-only.</param>
        /// <param name="href">The API endpoint to retrieve the webhook.
        /// Read-only.</param>
        /// <param name="enabled">Determine if the webhook is active.</param>
        /// <param name="environments">The environments from which the webhook
        /// will receive events. Allowed values are “sandbox” and “live”. If
        /// the environments parameter is omitted the webhook will receive
        /// events from both environments.
        /// </param>
        /// <param name="events">The events that will be published to the
        /// webhook. The supported events are: `report.completed`,
        /// `report.withdrawn`, `check.completed`, `check.started`,
        /// `check.form_opened`, `check.form_completed`. If the events
        /// parameter is omitted all the events will be subscribed.
        /// </param>
        public Webhook(string url, string id = default(string), string token = default(string), string href = default(string), bool? enabled = default(bool?), IList<string> environments = default(IList<string>), IList<string> events = default(IList<string>))
        {
            Id = id;
            Token = token;
            Href = href;
            Url = url;
            Enabled = enabled;
            Environments = environments;
            Events = events;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the unique identifier of the webhook. Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets webhook secret token used to sign the webhook's payload.
        /// Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; private set; }

        /// <summary>
        /// Gets the API endpoint to retrieve the webhook. Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "href")]
        public string Href { get; private set; }

        /// <summary>
        /// Gets or sets the url that will listen to notifications (must be
        /// https).
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets determine if the webhook is active.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets the environments from which the webhook will receive
        /// events. Allowed values are “sandbox” and “live”. If the
        /// environments parameter is omitted the webhook will receive events
        /// from both environments.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "environments")]
        public IList<string> Environments { get; set; }

        /// <summary>
        /// Gets or sets the events that will be published to the webhook. The
        /// supported events are: `report.completed`, `report.withdrawn`,
        /// `check.completed`, `check.started`, `check.form_opened`,
        /// `check.form_completed`. If the events parameter is omitted all the
        /// events will be subscribed.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<string> Events { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
        }
    }
}
