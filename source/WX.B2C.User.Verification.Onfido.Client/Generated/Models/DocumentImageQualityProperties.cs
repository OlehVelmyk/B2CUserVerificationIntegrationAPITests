// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Onfido.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DocumentImageQualityProperties
    {
        /// <summary>
        /// Initializes a new instance of the DocumentImageQualityProperties
        /// class.
        /// </summary>
        public DocumentImageQualityProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentImageQualityProperties
        /// class.
        /// </summary>
        /// <param name="darkPhoto">When an image of the document is too dark
        /// to be able to see data points.</param>
        /// <param name="glareOnPhoto">When there is light reflecting on the
        /// document causing glare to obstruct data points.</param>
        /// <param name="blurredPhoto">When data points are blurred and no
        /// reference can be made elsewhere in the document or if the data
        /// points are too blurry and 'they could be something else'.</param>
        /// <param name="coveredPhoto">When data points have been covered
        /// either by the applicant or by another object such as a
        /// sticker.</param>
        /// <param name="otherPhotoIssue">Any other reason not listed, such as
        /// when holograms are obscuring data points.</param>
        /// <param name="damagedDocument">When a document is damaged and we are
        /// unable to make out data points.</param>
        /// <param name="incorrectSide">When the incorrect side of a document
        /// has been uploaded, and we have not received the front.</param>
        /// <param name="cutOffDocument">When data points are not included in
        /// the image due to the document being cut off.</param>
        /// <param name="noDocumentInImage">If no document has been uploaded or
        /// there is a blank image.</param>
        /// <param name="twoDocumentsUploaded">When 2 different documents are
        /// submitted in the same check.</param>
        public DocumentImageQualityProperties(string darkPhoto = default(string), string glareOnPhoto = default(string), string blurredPhoto = default(string), string coveredPhoto = default(string), string otherPhotoIssue = default(string), string damagedDocument = default(string), string incorrectSide = default(string), string cutOffDocument = default(string), string noDocumentInImage = default(string), string twoDocumentsUploaded = default(string))
        {
            DarkPhoto = darkPhoto;
            GlareOnPhoto = glareOnPhoto;
            BlurredPhoto = blurredPhoto;
            CoveredPhoto = coveredPhoto;
            OtherPhotoIssue = otherPhotoIssue;
            DamagedDocument = damagedDocument;
            IncorrectSide = incorrectSide;
            CutOffDocument = cutOffDocument;
            NoDocumentInImage = noDocumentInImage;
            TwoDocumentsUploaded = twoDocumentsUploaded;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets when an image of the document is too dark to be able
        /// to see data points.
        /// </summary>
        [JsonProperty(PropertyName = "dark_photo")]
        public string DarkPhoto { get; set; }

        /// <summary>
        /// Gets or sets when there is light reflecting on the document causing
        /// glare to obstruct data points.
        /// </summary>
        [JsonProperty(PropertyName = "glare_on_photo")]
        public string GlareOnPhoto { get; set; }

        /// <summary>
        /// Gets or sets when data points are blurred and no reference can be
        /// made elsewhere in the document or if the data points are too blurry
        /// and 'they could be something else'.
        /// </summary>
        [JsonProperty(PropertyName = "blurred_photo")]
        public string BlurredPhoto { get; set; }

        /// <summary>
        /// Gets or sets when data points have been covered either by the
        /// applicant or by another object such as a sticker.
        /// </summary>
        [JsonProperty(PropertyName = "covered_photo")]
        public string CoveredPhoto { get; set; }

        /// <summary>
        /// Gets or sets any other reason not listed, such as when holograms
        /// are obscuring data points.
        /// </summary>
        [JsonProperty(PropertyName = "other_photo_issue")]
        public string OtherPhotoIssue { get; set; }

        /// <summary>
        /// Gets or sets when a document is damaged and we are unable to make
        /// out data points.
        /// </summary>
        [JsonProperty(PropertyName = "damaged_document")]
        public string DamagedDocument { get; set; }

        /// <summary>
        /// Gets or sets when the incorrect side of a document has been
        /// uploaded, and we have not received the front.
        /// </summary>
        [JsonProperty(PropertyName = "incorrect_side")]
        public string IncorrectSide { get; set; }

        /// <summary>
        /// Gets or sets when data points are not included in the image due to
        /// the document being cut off.
        /// </summary>
        [JsonProperty(PropertyName = "cut_off_document")]
        public string CutOffDocument { get; set; }

        /// <summary>
        /// Gets or sets if no document has been uploaded or there is a blank
        /// image.
        /// </summary>
        [JsonProperty(PropertyName = "no_document_in_image")]
        public string NoDocumentInImage { get; set; }

        /// <summary>
        /// Gets or sets when 2 different documents are submitted in the same
        /// check.
        /// </summary>
        [JsonProperty(PropertyName = "two_documents_uploaded")]
        public string TwoDocumentsUploaded { get; set; }

    }
}
