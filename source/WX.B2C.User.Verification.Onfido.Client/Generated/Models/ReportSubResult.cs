// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Onfido.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ReportSubResult.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ReportSubResultConverter))]
    public struct ReportSubResult : System.IEquatable<ReportSubResult>
    {
        private ReportSubResult(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// If all underlying verifications pass, the overall sub result will
        /// be clear.
        /// </summary>
        public static readonly ReportSubResult Clear = "clear";

        /// <summary>
        /// If the report has returned information where the check cannot be
        /// processed further (poor quality image or an unsupported document).
        /// </summary>
        public static readonly ReportSubResult Rejected = "rejected";

        /// <summary>
        /// If the document that is analysed is suspected to be fraudulent.
        /// </summary>
        public static readonly ReportSubResult Suspected = "suspected";

        /// <summary>
        /// If any other underlying verifications fail but they don't
        /// necessarily point to a fraudulent document (such as the name
        /// provided by the applicant doesn't match the one on the document).
        /// </summary>
        public static readonly ReportSubResult Caution = "caution";


        /// <summary>
        /// Underlying value of enum ReportSubResult
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ReportSubResult
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ReportSubResult
        /// </summary>
        public bool Equals(ReportSubResult e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ReportSubResult
        /// </summary>
        public static implicit operator ReportSubResult(string value)
        {
            return new ReportSubResult(value);
        }

        /// <summary>
        /// Implicit operator to convert ReportSubResult to string
        /// </summary>
        public static implicit operator string(ReportSubResult e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ReportSubResult
        /// </summary>
        public static bool operator == (ReportSubResult e1, ReportSubResult e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ReportSubResult
        /// </summary>
        public static bool operator != (ReportSubResult e1, ReportSubResult e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ReportSubResult
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ReportSubResult && Equals((ReportSubResult)obj);
        }

        /// <summary>
        /// Returns for hashCode ReportSubResult
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
