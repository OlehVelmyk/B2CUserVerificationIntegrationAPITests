// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Webhook.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Payload
    {
        /// <summary>
        /// Initializes a new instance of the Payload class.
        /// </summary>
        public Payload()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Payload class.
        /// </summary>
        public Payload(string resourceType, string action, ObjectModel objectProperty)
        {
            ResourceType = resourceType;
            Action = action;
            ObjectProperty = objectProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resource_type")]
        public string ResourceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "object")]
        public ObjectModel ObjectProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceType");
            }
            if (Action == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Action");
            }
            if (ObjectProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ObjectProperty");
            }
            if (ObjectProperty != null)
            {
                ObjectProperty.Validate();
            }
        }
    }
}
