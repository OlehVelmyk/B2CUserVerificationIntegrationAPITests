// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Webhook.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ActionDto
    {
        /// <summary>
        /// Initializes a new instance of the ActionDto class.
        /// </summary>
        public ActionDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActionDto class.
        /// </summary>
        public ActionDto(string actionType, IList<ApplicationDto> applications, string due, TaskDto task)
        {
            ActionType = actionType;
            Applications = applications;
            Due = due;
            Task = task;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "action_type")]
        public string ActionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "applications")]
        public IList<ApplicationDto> Applications { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "due")]
        public string Due { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "task")]
        public TaskDto Task { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ActionType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ActionType");
            }
            if (Applications == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Applications");
            }
            if (Due == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Due");
            }
            if (Task == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Task");
            }
            if (Applications != null)
            {
                foreach (var element in Applications)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Task != null)
            {
                Task.Validate();
            }
        }
    }
}
