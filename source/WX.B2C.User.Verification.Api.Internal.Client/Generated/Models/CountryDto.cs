// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Internal.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CountryDto
    {
        /// <summary>
        /// Initializes a new instance of the CountryDto class.
        /// </summary>
        public CountryDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CountryDto class.
        /// </summary>
        public CountryDto(string name, string alpha2Code, string alpha3Code, string phoneCode, string region, bool isNotSupported, bool isStateRequired, IList<StateDto> states)
        {
            Name = name;
            Alpha2Code = alpha2Code;
            Alpha3Code = alpha3Code;
            PhoneCode = phoneCode;
            Region = region;
            IsNotSupported = isNotSupported;
            IsStateRequired = isStateRequired;
            States = states;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alpha2Code")]
        public string Alpha2Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alpha3Code")]
        public string Alpha3Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phoneCode")]
        public string PhoneCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "region")]
        public string Region { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isNotSupported")]
        public bool IsNotSupported { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isStateRequired")]
        public bool IsStateRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "states")]
        public IList<StateDto> States { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Alpha2Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alpha2Code");
            }
            if (Alpha3Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alpha3Code");
            }
            if (PhoneCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PhoneCode");
            }
            if (Region == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Region");
            }
            if (States == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "States");
            }
            if (States != null)
            {
                foreach (var element in States)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
