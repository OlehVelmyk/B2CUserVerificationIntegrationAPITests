// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Internal.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class VerificationDetailsDto
    {
        /// <summary>
        /// Initializes a new instance of the VerificationDetailsDto class.
        /// </summary>
        public VerificationDetailsDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VerificationDetailsDto class.
        /// </summary>
        /// <param name="riskLevel">Possible values include: 'Low', 'Medium',
        /// 'High', 'ExtraHigh'</param>
        public VerificationDetailsDto(IList<string> taxResidence = default(IList<string>), IdDocumentNumberDto idDocumentNumber = default(IdDocumentNumberDto), TinDto tin = default(TinDto), string verificationIpAddress = default(string), bool? isPep = default(bool?), bool? isSanctioned = default(bool?), bool? isAdverseMedia = default(bool?), double? turnover = default(double?), string nationality = default(string), string poiIssuingCountry = default(string), string placeOfBirth = default(string), int? comprehensiveIndex = default(int?), bool? isIpMatched = default(bool?), string resolvedCountryCode = default(string), RiskLevel? riskLevel = default(RiskLevel?))
        {
            TaxResidence = taxResidence;
            IdDocumentNumber = idDocumentNumber;
            Tin = tin;
            VerificationIpAddress = verificationIpAddress;
            IsPep = isPep;
            IsSanctioned = isSanctioned;
            IsAdverseMedia = isAdverseMedia;
            Turnover = turnover;
            Nationality = nationality;
            PoiIssuingCountry = poiIssuingCountry;
            PlaceOfBirth = placeOfBirth;
            ComprehensiveIndex = comprehensiveIndex;
            IsIpMatched = isIpMatched;
            ResolvedCountryCode = resolvedCountryCode;
            RiskLevel = riskLevel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxResidence")]
        public IList<string> TaxResidence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idDocumentNumber")]
        public IdDocumentNumberDto IdDocumentNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tin")]
        public TinDto Tin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "verificationIpAddress")]
        public string VerificationIpAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPep")]
        public bool? IsPep { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSanctioned")]
        public bool? IsSanctioned { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isAdverseMedia")]
        public bool? IsAdverseMedia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "turnover")]
        public double? Turnover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nationality")]
        public string Nationality { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "poiIssuingCountry")]
        public string PoiIssuingCountry { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "placeOfBirth")]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comprehensiveIndex")]
        public int? ComprehensiveIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isIpMatched")]
        public bool? IsIpMatched { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resolvedCountryCode")]
        public string ResolvedCountryCode { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Low', 'Medium', 'High',
        /// 'ExtraHigh'
        /// </summary>
        [JsonProperty(PropertyName = "riskLevel")]
        public RiskLevel? RiskLevel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdDocumentNumber != null)
            {
                IdDocumentNumber.Validate();
            }
            if (Tin != null)
            {
                Tin.Validate();
            }
        }
    }
}
