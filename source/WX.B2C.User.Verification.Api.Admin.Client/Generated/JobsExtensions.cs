// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Jobs.
    /// </summary>
    public static partial class JobsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ScheduleAsync(this IJobs operations, ScheduleJobRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ScheduleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnscheduleAsync(this IJobs operations, UnscheduleJobRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnscheduleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fireInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InterruptAsync(this IJobs operations, string fireInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InterruptWithHttpMessagesAsync(fireInstanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
