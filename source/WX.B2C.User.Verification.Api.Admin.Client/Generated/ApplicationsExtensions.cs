// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Applications.
    /// </summary>
    public static partial class ApplicationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationDto>> GetAllAsync(this IApplications operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationDto> GetAsync(this IApplications operations, System.Guid userId, System.Guid applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(userId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationDto> GetDefaultAsync(this IApplications operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveAsync(this IApplications operations, ReasonDto body, System.Guid userId, System.Guid applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveWithHttpMessagesAsync(body, userId, applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RejectAsync(this IApplications operations, ReasonDto body, System.Guid userId, System.Guid applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RejectWithHttpMessagesAsync(body, userId, applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RequestReviewAsync(this IApplications operations, ReasonDto body, System.Guid userId, System.Guid applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RequestReviewWithHttpMessagesAsync(body, userId, applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevertDecisionAsync(this IApplications operations, ReasonDto body, System.Guid userId, System.Guid applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevertDecisionWithHttpMessagesAsync(body, userId, applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
