// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentCategoryLookupDto
    {
        /// <summary>
        /// Initializes a new instance of the DocumentCategoryLookupDto class.
        /// </summary>
        public DocumentCategoryLookupDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentCategoryLookupDto class.
        /// </summary>
        /// <param name="name">Possible values include: 'ProofOfIdentity',
        /// 'ProofOfAddress', 'Supporting', 'Taxation', 'ProofOfFunds',
        /// 'Selfie'</param>
        public DocumentCategoryLookupDto(DocumentCategory name, string description, IList<DocumentTypeLookupDto> types)
        {
            Name = name;
            Description = description;
            Types = types;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'ProofOfIdentity',
        /// 'ProofOfAddress', 'Supporting', 'Taxation', 'ProofOfFunds',
        /// 'Selfie'
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public DocumentCategory Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "types")]
        public IList<DocumentTypeLookupDto> Types { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Types == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Types");
            }
            if (Types != null)
            {
                foreach (var element in Types)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
