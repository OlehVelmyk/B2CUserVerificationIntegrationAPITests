// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CheckType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CheckType
    {
        [EnumMember(Value = "IdentityDocument")]
        IdentityDocument,
        [EnumMember(Value = "IdentityEnhanced")]
        IdentityEnhanced,
        [EnumMember(Value = "FacialSimilarity")]
        FacialSimilarity,
        [EnumMember(Value = "TaxResidence")]
        TaxResidence,
        [EnumMember(Value = "IpMatch")]
        IpMatch,
        [EnumMember(Value = "FaceDuplication")]
        FaceDuplication,
        [EnumMember(Value = "NameAndDoBDuplication")]
        NameAndDoBDuplication,
        [EnumMember(Value = "IdDocNumberDuplication")]
        IdDocNumberDuplication,
        [EnumMember(Value = "FraudScreening")]
        FraudScreening,
        [EnumMember(Value = "RiskListsScreening")]
        RiskListsScreening,
        [EnumMember(Value = "Address")]
        Address,
        [EnumMember(Value = "SurveyAnswers")]
        SurveyAnswers
    }
    internal static class CheckTypeEnumExtension
    {
        internal static string ToSerializedValue(this CheckType? value)
        {
            return value == null ? null : ((CheckType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CheckType value)
        {
            switch( value )
            {
                case CheckType.IdentityDocument:
                    return "IdentityDocument";
                case CheckType.IdentityEnhanced:
                    return "IdentityEnhanced";
                case CheckType.FacialSimilarity:
                    return "FacialSimilarity";
                case CheckType.TaxResidence:
                    return "TaxResidence";
                case CheckType.IpMatch:
                    return "IpMatch";
                case CheckType.FaceDuplication:
                    return "FaceDuplication";
                case CheckType.NameAndDoBDuplication:
                    return "NameAndDoBDuplication";
                case CheckType.IdDocNumberDuplication:
                    return "IdDocNumberDuplication";
                case CheckType.FraudScreening:
                    return "FraudScreening";
                case CheckType.RiskListsScreening:
                    return "RiskListsScreening";
                case CheckType.Address:
                    return "Address";
                case CheckType.SurveyAnswers:
                    return "SurveyAnswers";
            }
            return null;
        }

        internal static CheckType? ParseCheckType(this string value)
        {
            switch( value )
            {
                case "IdentityDocument":
                    return CheckType.IdentityDocument;
                case "IdentityEnhanced":
                    return CheckType.IdentityEnhanced;
                case "FacialSimilarity":
                    return CheckType.FacialSimilarity;
                case "TaxResidence":
                    return CheckType.TaxResidence;
                case "IpMatch":
                    return CheckType.IpMatch;
                case "FaceDuplication":
                    return CheckType.FaceDuplication;
                case "NameAndDoBDuplication":
                    return CheckType.NameAndDoBDuplication;
                case "IdDocNumberDuplication":
                    return CheckType.IdDocNumberDuplication;
                case "FraudScreening":
                    return CheckType.FraudScreening;
                case "RiskListsScreening":
                    return CheckType.RiskListsScreening;
                case "Address":
                    return CheckType.Address;
                case "SurveyAnswers":
                    return CheckType.SurveyAnswers;
            }
            return null;
        }
    }
}
