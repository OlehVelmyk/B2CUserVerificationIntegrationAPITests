// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TaskType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TaskType
    {
        [EnumMember(Value = "Identity")]
        Identity,
        [EnumMember(Value = "Address")]
        Address,
        [EnumMember(Value = "TaxResidence")]
        TaxResidence,
        [EnumMember(Value = "DuplicationScreening")]
        DuplicationScreening,
        [EnumMember(Value = "RiskListsScreening")]
        RiskListsScreening,
        [EnumMember(Value = "FinancialCondition")]
        FinancialCondition,
        [EnumMember(Value = "ProofOfFunds")]
        ProofOfFunds,
        [EnumMember(Value = "PepScreening")]
        PepScreening,
        [EnumMember(Value = "FraudScreening")]
        FraudScreening,
        [EnumMember(Value = "EnhancedDueDiligence")]
        EnhancedDueDiligence,
        [EnumMember(Value = "UserRiskScreening")]
        UserRiskScreening
    }
    internal static class TaskTypeEnumExtension
    {
        internal static string ToSerializedValue(this TaskType? value)
        {
            return value == null ? null : ((TaskType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TaskType value)
        {
            switch( value )
            {
                case TaskType.Identity:
                    return "Identity";
                case TaskType.Address:
                    return "Address";
                case TaskType.TaxResidence:
                    return "TaxResidence";
                case TaskType.DuplicationScreening:
                    return "DuplicationScreening";
                case TaskType.RiskListsScreening:
                    return "RiskListsScreening";
                case TaskType.FinancialCondition:
                    return "FinancialCondition";
                case TaskType.ProofOfFunds:
                    return "ProofOfFunds";
                case TaskType.PepScreening:
                    return "PepScreening";
                case TaskType.FraudScreening:
                    return "FraudScreening";
                case TaskType.EnhancedDueDiligence:
                    return "EnhancedDueDiligence";
                case TaskType.UserRiskScreening:
                    return "UserRiskScreening";
            }
            return null;
        }

        internal static TaskType? ParseTaskType(this string value)
        {
            switch( value )
            {
                case "Identity":
                    return TaskType.Identity;
                case "Address":
                    return TaskType.Address;
                case "TaxResidence":
                    return TaskType.TaxResidence;
                case "DuplicationScreening":
                    return TaskType.DuplicationScreening;
                case "RiskListsScreening":
                    return TaskType.RiskListsScreening;
                case "FinancialCondition":
                    return TaskType.FinancialCondition;
                case "ProofOfFunds":
                    return TaskType.ProofOfFunds;
                case "PepScreening":
                    return TaskType.PepScreening;
                case "FraudScreening":
                    return TaskType.FraudScreening;
                case "EnhancedDueDiligence":
                    return TaskType.EnhancedDueDiligence;
                case "UserRiskScreening":
                    return TaskType.UserRiskScreening;
            }
            return null;
        }
    }
}
