// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for LogEventLevel.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LogEventLevel
    {
        [EnumMember(Value = "Verbose")]
        Verbose,
        [EnumMember(Value = "Debug")]
        Debug,
        [EnumMember(Value = "Information")]
        Information,
        [EnumMember(Value = "Warning")]
        Warning,
        [EnumMember(Value = "Error")]
        Error,
        [EnumMember(Value = "Fatal")]
        Fatal
    }
    internal static class LogEventLevelEnumExtension
    {
        internal static string ToSerializedValue(this LogEventLevel? value)
        {
            return value == null ? null : ((LogEventLevel)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this LogEventLevel value)
        {
            switch( value )
            {
                case LogEventLevel.Verbose:
                    return "Verbose";
                case LogEventLevel.Debug:
                    return "Debug";
                case LogEventLevel.Information:
                    return "Information";
                case LogEventLevel.Warning:
                    return "Warning";
                case LogEventLevel.Error:
                    return "Error";
                case LogEventLevel.Fatal:
                    return "Fatal";
            }
            return null;
        }

        internal static LogEventLevel? ParseLogEventLevel(this string value)
        {
            switch( value )
            {
                case "Verbose":
                    return LogEventLevel.Verbose;
                case "Debug":
                    return LogEventLevel.Debug;
                case "Information":
                    return LogEventLevel.Information;
                case "Warning":
                    return LogEventLevel.Warning;
                case "Error":
                    return LogEventLevel.Error;
                case "Fatal":
                    return LogEventLevel.Fatal;
            }
            return null;
        }
    }
}
