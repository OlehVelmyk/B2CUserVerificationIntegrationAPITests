// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ActionDto
    {
        /// <summary>
        /// Initializes a new instance of the ActionDto class.
        /// </summary>
        public ActionDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActionDto class.
        /// </summary>
        /// <param name="actionType">Possible values include: 'Survey',
        /// 'Selfie', 'TaxResidence', 'Tin', 'ProofOfIdentity',
        /// 'ProofOfAddress', 'ProofOfFunds', 'W9Form'</param>
        public ActionDto(ActionType actionType, string xPath, int priority, IDictionary<string, string> metadata = default(IDictionary<string, string>))
        {
            ActionType = actionType;
            XPath = xPath;
            Priority = priority;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Survey', 'Selfie',
        /// 'TaxResidence', 'Tin', 'ProofOfIdentity', 'ProofOfAddress',
        /// 'ProofOfFunds', 'W9Form'
        /// </summary>
        [JsonProperty(PropertyName = "actionType")]
        public ActionType ActionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "xPath")]
        public string XPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (XPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "XPath");
            }
        }
    }
}
