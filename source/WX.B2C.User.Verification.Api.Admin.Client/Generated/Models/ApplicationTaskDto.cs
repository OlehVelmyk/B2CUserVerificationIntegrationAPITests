// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ApplicationTaskDto
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationTaskDto class.
        /// </summary>
        public ApplicationTaskDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationTaskDto class.
        /// </summary>
        /// <param name="state">Possible values include: 'Incomplete',
        /// 'Completed'</param>
        /// <param name="result">Possible values include: 'Passed',
        /// 'Failed'</param>
        public ApplicationTaskDto(System.Guid id, string name, int priority, TaskState state, TaskResult? result = default(TaskResult?))
        {
            Id = id;
            Name = name;
            Priority = priority;
            State = state;
            Result = result;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Incomplete', 'Completed'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public TaskState State { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Passed', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public TaskResult? Result { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
