// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CheckState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CheckState
    {
        [EnumMember(Value = "Pending")]
        Pending,
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Complete")]
        Complete,
        [EnumMember(Value = "Error")]
        Error,
        [EnumMember(Value = "Cancelled")]
        Cancelled
    }
    internal static class CheckStateEnumExtension
    {
        internal static string ToSerializedValue(this CheckState? value)
        {
            return value == null ? null : ((CheckState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CheckState value)
        {
            switch( value )
            {
                case CheckState.Pending:
                    return "Pending";
                case CheckState.Running:
                    return "Running";
                case CheckState.Complete:
                    return "Complete";
                case CheckState.Error:
                    return "Error";
                case CheckState.Cancelled:
                    return "Cancelled";
            }
            return null;
        }

        internal static CheckState? ParseCheckState(this string value)
        {
            switch( value )
            {
                case "Pending":
                    return CheckState.Pending;
                case "Running":
                    return CheckState.Running;
                case "Complete":
                    return CheckState.Complete;
                case "Error":
                    return CheckState.Error;
                case "Cancelled":
                    return CheckState.Cancelled;
            }
            return null;
        }
    }
}
