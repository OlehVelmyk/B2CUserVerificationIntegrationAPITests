// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TaskDto
    {
        /// <summary>
        /// Initializes a new instance of the TaskDto class.
        /// </summary>
        public TaskDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskDto class.
        /// </summary>
        /// <param name="type">Possible values include: 'Identity', 'Address',
        /// 'TaxResidence', 'DuplicationScreening', 'RiskListsScreening',
        /// 'FinancialCondition', 'ProofOfFunds', 'PepScreening',
        /// 'FraudScreening', 'EnhancedDueDiligence',
        /// 'UserRiskScreening'</param>
        /// <param name="state">Possible values include: 'Incomplete',
        /// 'Completed'</param>
        /// <param name="result">Possible values include: 'Passed',
        /// 'Failed'</param>
        public TaskDto(System.Guid id, TaskType type, TaskVariantDto variant, int priority, TaskState state, IList<TaskCollectionStepDto> collectionSteps, IList<TaskCheckDto> checks, System.DateTime createdAt, TaskResult? result = default(TaskResult?))
        {
            Id = id;
            Type = type;
            Variant = variant;
            Priority = priority;
            State = state;
            Result = result;
            CollectionSteps = collectionSteps;
            Checks = checks;
            CreatedAt = createdAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Identity', 'Address',
        /// 'TaxResidence', 'DuplicationScreening', 'RiskListsScreening',
        /// 'FinancialCondition', 'ProofOfFunds', 'PepScreening',
        /// 'FraudScreening', 'EnhancedDueDiligence', 'UserRiskScreening'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public TaskType Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variant")]
        public TaskVariantDto Variant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Incomplete', 'Completed'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public TaskState State { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Passed', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public TaskResult? Result { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "collectionSteps")]
        public IList<TaskCollectionStepDto> CollectionSteps { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "checks")]
        public IList<TaskCheckDto> Checks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime CreatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Variant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Variant");
            }
            if (CollectionSteps == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CollectionSteps");
            }
            if (Checks == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Checks");
            }
            if (Variant != null)
            {
                Variant.Validate();
            }
            if (CollectionSteps != null)
            {
                foreach (var element in CollectionSteps)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Checks != null)
            {
                foreach (var element1 in Checks)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
