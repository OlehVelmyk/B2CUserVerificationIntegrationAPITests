// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Admin.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CollectionStepDto
    {
        /// <summary>
        /// Initializes a new instance of the CollectionStepDto class.
        /// </summary>
        public CollectionStepDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CollectionStepDto class.
        /// </summary>
        /// <param name="state">Possible values include: 'Requested',
        /// 'InReview', 'Completed', 'Cancelled'</param>
        /// <param name="reviewResult">Possible values include: 'Approved',
        /// 'Rejected'</param>
        public CollectionStepDto(System.Guid id, CollectionStepVariantDto variant, CollectionStepState state, bool isRequired, bool isReviewNeeded, object data, IList<System.Guid> relatedTasks, System.DateTime requestedAt, CollectionStepReviewResult? reviewResult = default(CollectionStepReviewResult?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Id = id;
            Variant = variant;
            State = state;
            ReviewResult = reviewResult;
            IsRequired = isRequired;
            IsReviewNeeded = isReviewNeeded;
            Data = data;
            RelatedTasks = relatedTasks;
            RequestedAt = requestedAt;
            UpdatedAt = updatedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variant")]
        public CollectionStepVariantDto Variant { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Requested', 'InReview',
        /// 'Completed', 'Cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public CollectionStepState State { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Approved', 'Rejected'
        /// </summary>
        [JsonProperty(PropertyName = "reviewResult")]
        public CollectionStepReviewResult? ReviewResult { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isRequired")]
        public bool IsRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReviewNeeded")]
        public bool IsReviewNeeded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relatedTasks")]
        public IList<System.Guid> RelatedTasks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedAt")]
        public System.DateTime RequestedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Variant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Variant");
            }
            if (Data == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Data");
            }
            if (RelatedTasks == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelatedTasks");
            }
            if (Variant != null)
            {
                Variant.Validate();
            }
        }
    }
}
