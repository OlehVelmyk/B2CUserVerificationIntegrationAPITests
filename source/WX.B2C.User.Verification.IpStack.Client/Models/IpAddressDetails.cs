// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An object containing IP address location data.
    /// </summary>
    public partial class IpAddressDetails
    {
        /// <summary>
        /// Initializes a new instance of the IpAddressDetails class.
        /// </summary>
        public IpAddressDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpAddressDetails class.
        /// </summary>
        /// <param name="ip">Requested IP address.</param>
        /// <param name="hostname">Hostname the requested IP resolves to, only
        /// returned if Hostname Lookup is enabled.</param>
        /// <param name="type">IP address type IPv4 or IPv6. Possible values
        /// include: 'IPv4', 'IPv6'</param>
        /// <param name="continentCode">2-letter continent code associated with
        /// the IP. Possible values include: 'AF', 'AS', 'EU', 'NA', 'OC',
        /// 'SA', 'AN'</param>
        /// <param name="continentName">Name of the continent associated with
        /// the IP.</param>
        /// <param name="countryCode">2-letter country code associated with the
        /// IP. (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</param>
        /// <param name="countryName">Name of the country associated with the
        /// IP.</param>
        /// <param name="regionCode">Region code of the region associated with
        /// the IP (e.g. CA for California).</param>
        /// <param name="regionName">Name of the region associated with the
        /// IP.</param>
        /// <param name="city">Name of the city associated with the IP.</param>
        /// <param name="zip">ZIP code associated with the IP.</param>
        /// <param name="latitude">Latitude value associated with the
        /// IP.</param>
        /// <param name="longitude">Longitude value associated with the
        /// IP.</param>
        /// <param name="location">Returns multiple location-related
        /// objects.</param>
        /// <param name="timeZone">Returns an object containing
        /// timezone-related data.</param>
        /// <param name="currency">Returns an object containing
        /// currency-related data.</param>
        /// <param name="connection">Returns an object containing
        /// connection-related data.</param>
        /// <param name="security">Returns an object containing
        /// security-related data.</param>
        public IpAddressDetails(string ip = default(string), string hostname = default(string), IPType? type = default(IPType?), string continentCode = default(string), string continentName = default(string), string countryCode = default(string), string countryName = default(string), string regionCode = default(string), string regionName = default(string), string city = default(string), string zip = default(string), double latitude = default(double), double longitude = default(double), Location location = default(Location), TimeZone timeZone = default(TimeZone), Currency currency = default(Currency), Connection connection = default(Connection), Security security = default(Security))
        {
            Ip = ip;
            Hostname = hostname;
            Type = type;
            ContinentCode = continentCode;
            ContinentName = continentName;
            CountryCode = countryCode;
            CountryName = countryName;
            RegionCode = regionCode;
            RegionName = regionName;
            City = city;
            Zip = zip;
            Latitude = latitude;
            Longitude = longitude;
            Location = location;
            TimeZone = timeZone;
            Currency = currency;
            Connection = connection;
            Security = security;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets requested IP address.
        /// </summary>
        [JsonProperty(PropertyName = "ip")]
        public string Ip { get; private set; }

        /// <summary>
        /// Gets hostname the requested IP resolves to, only returned if
        /// Hostname Lookup is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "hostname")]
        public string Hostname { get; private set; }

        /// <summary>
        /// Gets IP address type IPv4 or IPv6. Possible values include: 'IPv4',
        /// 'IPv6'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public IPType? Type { get; private set; }

        /// <summary>
        /// Gets 2-letter continent code associated with the IP. Possible
        /// values include: 'AF', 'AS', 'EU', 'NA', 'OC', 'SA', 'AN'
        /// </summary>
        [JsonProperty(PropertyName = "continent_code")]
        public string ContinentCode { get; private set; }

        /// <summary>
        /// Gets name of the continent associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "continent_name")]
        public string ContinentName { get; private set; }

        /// <summary>
        /// Gets 2-letter country code associated with the IP.
        /// (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        /// </summary>
        [JsonProperty(PropertyName = "country_code")]
        public string CountryCode { get; private set; }

        /// <summary>
        /// Gets name of the country associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "country_name")]
        public string CountryName { get; private set; }

        /// <summary>
        /// Gets region code of the region associated with the IP (e.g. CA for
        /// California).
        /// </summary>
        [JsonProperty(PropertyName = "region_code")]
        public string RegionCode { get; private set; }

        /// <summary>
        /// Gets name of the region associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "region_name")]
        public string RegionName { get; private set; }

        /// <summary>
        /// Gets name of the city associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; private set; }

        /// <summary>
        /// Gets ZIP code associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "zip")]
        public string Zip { get; private set; }

        /// <summary>
        /// Gets latitude value associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "latitude")]
        public double Latitude { get; private set; }

        /// <summary>
        /// Gets longitude value associated with the IP.
        /// </summary>
        [JsonProperty(PropertyName = "longitude")]
        public double Longitude { get; private set; }

        /// <summary>
        /// Gets or sets returns multiple location-related objects.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets returns an object containing timezone-related data.
        /// </summary>
        [JsonProperty(PropertyName = "time_zone")]
        public TimeZone TimeZone { get; set; }

        /// <summary>
        /// Gets or sets returns an object containing currency-related data.
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or sets returns an object containing connection-related data.
        /// </summary>
        [JsonProperty(PropertyName = "connection")]
        public Connection Connection { get; set; }

        /// <summary>
        /// Gets or sets returns an object containing security-related data.
        /// </summary>
        [JsonProperty(PropertyName = "security")]
        public Security Security { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContinentCode != null)
            {
                if (ContinentCode.Length > 2)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ContinentCode", 2);
                }
            }
        }
    }
}
