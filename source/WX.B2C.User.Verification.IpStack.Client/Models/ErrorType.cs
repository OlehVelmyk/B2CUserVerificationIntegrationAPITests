// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ErrorType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ErrorTypeConverter))]
    public struct ErrorType : System.IEquatable<ErrorType>
    {
        private ErrorType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The requested resource does not exist.
        /// </summary>
        public static readonly ErrorType FourZeroFourNotFound = "404_not_found";

        /// <summary>
        /// No API Key was specified.
        /// </summary>
        public static readonly ErrorType MissingAccessKey = "missing_access_key";

        /// <summary>
        /// No API Key was specified or an invalid API Key was specified.
        /// </summary>
        public static readonly ErrorType InvalidAccessKey = "invalid_access_key";

        /// <summary>
        /// The current user account is not active. User will be prompted to
        /// get in touch with Customer Support.
        /// </summary>
        public static readonly ErrorType InactiveUser = "inactive_user";

        /// <summary>
        /// The requested API endpoint does not exist.
        /// </summary>
        public static readonly ErrorType InvalidApiFunction = "invalid_api_function";

        /// <summary>
        /// The maximum allowed amount of monthly API requests has been
        /// reached.
        /// </summary>
        public static readonly ErrorType UsageLimitReached = "usage_limit_reached";

        /// <summary>
        /// The current subscription plan does not support this API endpoint.
        /// </summary>
        public static readonly ErrorType FunctionAccessRestricted = "function_access_restricted";

        /// <summary>
        /// The user's current subscription plan does not support HTTPS
        /// Encryption.
        /// </summary>
        public static readonly ErrorType HttpsAccessRestricted = "https_access_restricted";

        /// <summary>
        /// One or more invalid fields were specified using the fields
        /// parameter.
        /// </summary>
        public static readonly ErrorType InvalidFields = "invalid_fields";

        /// <summary>
        /// Too many IPs have been specified for the Bulk Lookup Endpoint.
        /// (max. 50)
        /// </summary>
        public static readonly ErrorType TooManyIps = "too_many_ips";

        /// <summary>
        /// The Bulk Lookup Endpoint is not supported on the current
        /// subscription plan
        /// </summary>
        public static readonly ErrorType BatchNotSupportedOnPlan = "batch_not_supported_on_plan";


        /// <summary>
        /// Underlying value of enum ErrorType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ErrorType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ErrorType
        /// </summary>
        public bool Equals(ErrorType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ErrorType
        /// </summary>
        public static implicit operator ErrorType(string value)
        {
            return new ErrorType(value);
        }

        /// <summary>
        /// Implicit operator to convert ErrorType to string
        /// </summary>
        public static implicit operator string(ErrorType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ErrorType
        /// </summary>
        public static bool operator == (ErrorType e1, ErrorType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ErrorType
        /// </summary>
        public static bool operator != (ErrorType e1, ErrorType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ErrorType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ErrorType && Equals((ErrorType)obj);
        }

        /// <summary>
        /// Returns for hashCode ErrorType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
