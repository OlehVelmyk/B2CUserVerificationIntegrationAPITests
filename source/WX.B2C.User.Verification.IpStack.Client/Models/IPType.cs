// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for IPType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(IPTypeConverter))]
    public struct IPType : System.IEquatable<IPType>
    {
        private IPType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// IPv4
        /// </summary>
        public static readonly IPType IPv4 = "IPv4";

        /// <summary>
        /// IPv6
        /// </summary>
        public static readonly IPType IPv6 = "IPv6";


        /// <summary>
        /// Underlying value of enum IPType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for IPType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type IPType
        /// </summary>
        public bool Equals(IPType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to IPType
        /// </summary>
        public static implicit operator IPType(string value)
        {
            return new IPType(value);
        }

        /// <summary>
        /// Implicit operator to convert IPType to string
        /// </summary>
        public static implicit operator string(IPType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum IPType
        /// </summary>
        public static bool operator == (IPType e1, IPType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum IPType
        /// </summary>
        public static bool operator != (IPType e1, IPType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for IPType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is IPType && Equals((IPType)obj);
        }

        /// <summary>
        /// Returns for hashCode IPType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
