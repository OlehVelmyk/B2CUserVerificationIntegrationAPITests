// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for CrawlerType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(CrawlerTypeConverter))]
    public struct CrawlerType : System.IEquatable<CrawlerType>
    {
        private CrawlerType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Unrecognized
        /// </summary>
        public static readonly CrawlerType Unrecognized = "unrecognized";

        /// <summary>
        /// Search engine bot
        /// </summary>
        public static readonly CrawlerType SearchEngineBot = "search_engine_bot";

        /// <summary>
        /// Site monitor
        /// </summary>
        public static readonly CrawlerType SiteMonitor = "site_monitor";

        /// <summary>
        /// Screenshot creator
        /// </summary>
        public static readonly CrawlerType ScreenshotCreator = "screenshot_creator";

        /// <summary>
        /// Link checker
        /// </summary>
        public static readonly CrawlerType LinkChecker = "link_checker";

        /// <summary>
        /// Wearable computer
        /// </summary>
        public static readonly CrawlerType WearableComputer = "wearable_computer";

        /// <summary>
        /// Web scraper
        /// </summary>
        public static readonly CrawlerType WebScraper = "web_scraper";

        /// <summary>
        /// Vulnerability scanner
        /// </summary>
        public static readonly CrawlerType VulnerabilityScanner = "vulnerability_scanner";

        /// <summary>
        /// Virus scanner
        /// </summary>
        public static readonly CrawlerType VirusScanner = "virus_scanner";

        /// <summary>
        /// Speed tester
        /// </summary>
        public static readonly CrawlerType SpeedTester = "speed_tester";

        /// <summary>
        /// Feed Fetcher
        /// </summary>
        public static readonly CrawlerType FeedFetcher = "feed_fetcher";

        /// <summary>
        /// Tool
        /// </summary>
        public static readonly CrawlerType Tool = "tool";

        /// <summary>
        /// Marketing
        /// </summary>
        public static readonly CrawlerType Marketing = "marketing";


        /// <summary>
        /// Underlying value of enum CrawlerType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for CrawlerType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type CrawlerType
        /// </summary>
        public bool Equals(CrawlerType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to CrawlerType
        /// </summary>
        public static implicit operator CrawlerType(string value)
        {
            return new CrawlerType(value);
        }

        /// <summary>
        /// Implicit operator to convert CrawlerType to string
        /// </summary>
        public static implicit operator string(CrawlerType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum CrawlerType
        /// </summary>
        public static bool operator == (CrawlerType e1, CrawlerType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum CrawlerType
        /// </summary>
        public static bool operator != (CrawlerType e1, CrawlerType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for CrawlerType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is CrawlerType && Equals((CrawlerType)obj);
        }

        /// <summary>
        /// Returns for hashCode CrawlerType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
