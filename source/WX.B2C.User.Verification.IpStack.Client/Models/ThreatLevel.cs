// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ThreatLevel.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ThreatLevelConverter))]
    public struct ThreatLevel : System.IEquatable<ThreatLevel>
    {
        private ThreatLevel(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Low Risk
        /// </summary>
        public static readonly ThreatLevel Low = "low";

        /// <summary>
        /// Medium Risk
        /// </summary>
        public static readonly ThreatLevel Medium = "medium";

        /// <summary>
        /// High Risk
        /// </summary>
        public static readonly ThreatLevel High = "high";


        /// <summary>
        /// Underlying value of enum ThreatLevel
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ThreatLevel
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ThreatLevel
        /// </summary>
        public bool Equals(ThreatLevel e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ThreatLevel
        /// </summary>
        public static implicit operator ThreatLevel(string value)
        {
            return new ThreatLevel(value);
        }

        /// <summary>
        /// Implicit operator to convert ThreatLevel to string
        /// </summary>
        public static implicit operator string(ThreatLevel e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ThreatLevel
        /// </summary>
        public static bool operator == (ThreatLevel e1, ThreatLevel e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ThreatLevel
        /// </summary>
        public static bool operator != (ThreatLevel e1, ThreatLevel e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ThreatLevel
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ThreatLevel && Equals((ThreatLevel)obj);
        }

        /// <summary>
        /// Returns for hashCode ThreatLevel
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
