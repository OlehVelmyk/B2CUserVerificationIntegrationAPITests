// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.IpStack.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ipstack offers a powerful, real-time IP to geolocation API capable of
    /// looking up accurate location data and assessing security threats
    /// originating from risky IP addresses.
    /// (https://ipstack.com/documentation)
    /// </summary>
    public partial interface IIpStackApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Your API Access Key is your unique authentication key used to gain
        /// access to the ipstack API. In order to authenticate with the API,
        /// append the access_key parameter to the API's base URL and set it to
        /// your access key value.
        /// </summary>
        string AccessKey { get; set; }


        /// <summary>
        /// The ipstack's primary endpoint is called Standard Lookup and is
        /// used to look up single IPv4 or IPv6 addresses.
        /// </summary>
        /// <param name='ipAddress'>
        /// Any IPv4 or IPv6 address; you can also enter a domain URL to have
        /// ipstack resolve the domain to the underlying IP address.
        /// </param>
        /// <param name='fields'>
        /// Set to your preferred output field(s) according to the Specify
        /// Output Fields section. (https://ipstack.com/documentation#fields).
        /// </param>
        /// <param name='hostname'>
        /// Set to 1 to enable Hostname Lookup.
        /// (https://ipstack.com/documentation#hostname).
        /// </param>
        /// <param name='security'>
        /// Set to 1 to enable the Security module.
        /// (https://ipstack.com/documentation#security).
        /// </param>
        /// <param name='language'>
        /// Set to a 2-letter language code according to the Specify Output
        /// Language section to change output language.
        /// </param>
        /// <param name='callback'>
        /// Specify a JSONP callback function name according to the JSONP
        /// Callbacks section.
        /// </param>
        /// <param name='output'>
        /// Set to json or xml to choose between output formats.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IpAddressDetails>> LookupWithHttpMessagesAsync(string ipAddress, string fields = default(string), bool? hostname = default(bool?), bool? security = default(bool?), string language = default(string), string callback = default(string), string output = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The ipstack's endpoint to request data for multiple IPv4 or IPv6
        /// addresses at the same time.
        /// </summary>
        /// <param name='ipAddresses'>
        /// A comma-separated list of IPv4 or IPv6 addresses; you can also
        /// enter a domain URLs to have ipstack resolve the domains to their
        /// underlying IP addresses. (Maximum allowed values: 50)
        /// </param>
        /// <param name='fields'>
        /// Set to your preferred output field(s) according to the Specify
        /// Output Fields section. (https://ipstack.com/documentation#fields).
        /// </param>
        /// <param name='hostname'>
        /// Set to 1 to enable Hostname Lookup.
        /// (https://ipstack.com/documentation#hostname).
        /// </param>
        /// <param name='security'>
        /// Set to 1 to enable the Security module.
        /// (https://ipstack.com/documentation#security).
        /// </param>
        /// <param name='language'>
        /// Set to a 2-letter language code according to the Specify Output
        /// Language section to change output language.
        /// </param>
        /// <param name='callback'>
        /// Specify a JSONP callback function name according to the JSONP
        /// Callbacks section.
        /// </param>
        /// <param name='output'>
        /// Set to json or xml to choose between output formats.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IpAddressDetails>>> BulkLookupWithHttpMessagesAsync(IList<string> ipAddresses, string fields = default(string), bool? hostname = default(bool?), bool? security = default(bool?), string language = default(string), string callback = default(string), string output = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
