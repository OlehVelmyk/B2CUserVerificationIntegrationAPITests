// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WX.B2C.User.Verification.Api.Public.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DocumentValidationRuleItemDto
    {
        /// <summary>
        /// Initializes a new instance of the DocumentValidationRuleItemDto
        /// class.
        /// </summary>
        public DocumentValidationRuleItemDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentValidationRuleItemDto
        /// class.
        /// </summary>
        /// <param name="documentSide">Possible values include: 'Front',
        /// 'Back', 'Both'</param>
        public DocumentValidationRuleItemDto(string documentType, IList<string> extensions, string descriptionCode, int maxSizeInBytes, DocumentSide? documentSide = default(DocumentSide?), int? maxQuantity = default(int?), int? minQuantity = default(int?))
        {
            DocumentType = documentType;
            Extensions = extensions;
            DescriptionCode = descriptionCode;
            MaxSizeInBytes = maxSizeInBytes;
            DocumentSide = documentSide;
            MaxQuantity = maxQuantity;
            MinQuantity = minQuantity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "document_type")]
        public string DocumentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<string> Extensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description_code")]
        public string DescriptionCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_size_in_bytes")]
        public int MaxSizeInBytes { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Front', 'Back', 'Both'
        /// </summary>
        [JsonProperty(PropertyName = "document_side")]
        public DocumentSide? DocumentSide { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_quantity")]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "min_quantity")]
        public int? MinQuantity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DocumentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DocumentType");
            }
            if (Extensions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Extensions");
            }
            if (DescriptionCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DescriptionCode");
            }
        }
    }
}
